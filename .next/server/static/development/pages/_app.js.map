{"version":3,"file":"static/development/pages/_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./lib/apollo.tsx","webpack:///./pages/_app.tsx","webpack:///external \"@apollo/client\"","webpack:///external \"@apollo/react-ssr\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"next/head\"","webpack:///external \"react\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static/development/pages/_app.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import React from \"react\";\nimport Head from \"next/head\";\nimport { HttpLink, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(Application: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return <Application {...pageProps} apolloClient={client} />;\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      Application.displayName || Application.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}));\n\n      const pageProps = Application.getInitialProps\n        ? await Application.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<any> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}) {\n  const link = new HttpLink({\n    uri: \"https://swapi.graph.cool/\", // Server URL (must be absolute)\n    fetch\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n// import React from \"react\";\n// import App from \"next/app\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import createApolloClient from \"./apolloClient\";\n\n// let globalApolloClient = null;\n\n// /**\n//  * @param {NextPageContext | NextAppContext} ctx\n//  */\n// export const initOnContext = ctx => {\n//   const inAppContext = Boolean(ctx.ctx);\n\n//   // We consider installing `withApollo({ ssr: true })` on global App level\n//   // as antipattern since it disables project wide Automatic Static Optimization.\n//   if (process.env.NODE_ENV === \"development\") {\n//     if (inAppContext) {\n//       console.warn(\n//         \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n//           \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n//       );\n//     }\n//   }\n\n//   // Initialize ApolloClient if not already done\n//   const apolloClient =\n//     ctx.apolloClient ||\n//     initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n//   apolloClient.toJSON = () => null;\n\n//   ctx.apolloClient = apolloClient;\n//   if (inAppContext) {\n//     ctx.ctx.apolloClient = apolloClient;\n//   }\n\n//   return ctx;\n// };\n\n// /**\n//  * @param  {NormalizedCacheObject} initialState\n//  * @param  {NextPageContext} ctx\n//  */\n// const initApolloClient = (initialState, ctx) => {\n//   if (typeof window === \"undefined\") {\n//     return createApolloClient(initialState, ctx);\n//   }\n\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState, ctx);\n//   }\n\n//   return globalApolloClient;\n// };\n\n// /**\n//  * Creates a withApollo HOC\n//  * @param  {Object} withApolloOptions\n//  * @param  {Boolean} [withApolloOptions.ssr=false]\n//  * @returns {(PageComponent: ReactNode) => ReactNode}\n//  */\n// export const withApollo = ({ ssr = false } = {}) => PageComponent => {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     let client;\n//     if (apolloClient) {\n//       // Happens on: getDataFromTree & next.js ssr\n//       client = apolloClient;\n//     } else {\n//       // Happens on: next.js csr\n//       client = initApolloClient(apolloState, undefined);\n//     }\n\n//     return <PageComponent {...pageProps} client={client} />;\n//   };\n\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== \"production\") {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || \"Component\";\n//     WithApollo.displayName = `withApollo(${displayName})`;\n//   }\n\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const inAppContext = Boolean(ctx.ctx);\n//       const { apolloClient } = initOnContext(ctx);\n\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {};\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx);\n//       } else if (inAppContext) {\n//         pageProps = await App.getInitialProps(ctx);\n//       }\n\n//       // Only on the server:\n//       if (typeof window === \"undefined\") {\n//         const { AppTree } = ctx;\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps;\n//         }\n\n//         if (ssr && AppTree) {\n//           try {\n//             const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n//             // Since AppComponents and PageComponents have different context types\n//             // we need to modify their props a little.\n//             let props;\n//             if (inAppContext) {\n//               props = { ...pageProps, apolloClient };\n//             } else {\n//               props = { pageProps: { ...pageProps, apolloClient } };\n//             }\n\n//             await getDataFromTree(<AppTree {...props} />);\n//           } catch (error) {\n//             console.error(\"Error while running `getDataFromTree`\", error);\n//           }\n//         }\n//       }\n\n//       return {\n//         ...pageProps,\n//         apolloState: apolloClient.cache.extract(),\n//         apolloClient: ctx.apolloClient\n//       };\n//     };\n//   }\n\n//   return WithApollo;\n// };\n","import App from \"next/app\";\nimport { withApollo } from \"./../lib/apollo\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nconst MyApp = ({ Component, pageProps, apolloClient }) => {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <Component {...pageProps} />\n    </ApolloProvider>\n  );\n};\n\nexport default withApollo(MyApp);\n","module.exports = require(\"@apollo/client\");","module.exports = require(\"@apollo/react-ssr\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");"],"mappingsrGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAQA;AAAA;AAAA;AACA;AAKA;AAJA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAFA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/QA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACZA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}