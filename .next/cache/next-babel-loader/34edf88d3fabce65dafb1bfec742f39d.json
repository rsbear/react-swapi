{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useReducer } from 'react';\nimport { useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery } from '../generated/graphql';\nconst initState = {\n  mainType: \"films\",\n  typeArr: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return _objectSpread({}, state, {\n        mainType: action.payload\n      });\n\n    case 'typeArr':\n      return _objectSpread({}, state, {\n        typeArr: action.payload\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport const useTypeFilter = () => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initState);\n  const [fetchFilms, films] = useAllFilmsLazyQuery();\n  const [fetchPersons, persons] = useAllCharacterNamesLazyQuery();\n  const [fetchStarships, starships] = useAllStarshipsLazyQuery();\n  useEffect(() => {\n    if (state.mainType === \"films\") {\n      fetchFilms();\n\n      if (!films.loading && !films.error) {\n        dispatch({\n          type: 'typeArr',\n          payload: films.data.allFilms\n        });\n      }\n    }\n  }, [films]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllFilmsLazyQuery","useAllCharacterNamesLazyQuery","useAllStarshipsLazyQuery","initState","mainType","typeArr","reducer","state","action","type","payload","useTypeFilter","dispatch","fetchFilms","films","fetchPersons","persons","fetchStarships","starships","loading","error","data","allFilms"],"mappings":";;;;;;AAAA,SAA0BA,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,oBAAT,EAA+BC,6BAA/B,EAA8DC,wBAA9D,QAA8F,sBAA9F;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,OADM;AAEhBC,EAAAA,OAAO,EAAE;AAFO,CAAlB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,QAAQ,EAAEI,MAAM,CAACE;AAApC;;AACF,SAAK,SAAL;AACE,+BAAYH,KAAZ;AAAmBF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAAnC;;AACF;AACE,aAAO,EAAP;AANJ;AAQD,CATD;;AAWA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM;AAAA,OAACJ,KAAD;AAAA,OAAQK;AAAR,MAAoBb,UAAU,CAACO,OAAD,EAAUH,SAAV,CAApC;AACA,QAAM,CAACU,UAAD,EAAaC,KAAb,IAAsBd,oBAAoB,EAAhD;AACA,QAAM,CAACe,YAAD,EAAeC,OAAf,IAA0Bf,6BAA6B,EAA7D;AACA,QAAM,CAACgB,cAAD,EAAiBC,SAAjB,IAA8BhB,wBAAwB,EAA5D;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,KAAK,CAACH,QAAN,KAAmB,OAAvB,EAAgC;AAC9BS,MAAAA,UAAU;;AACV,UAAI,CAACC,KAAK,CAACK,OAAP,IAAkB,CAACL,KAAK,CAACM,KAA7B,EAAoC;AAClCR,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,OAAO,EAAEI,KAAK,CAACO,IAAN,CAAWC;AAAvC,SAAD,CAAR;AACD;AACF;AACF,GAPQ,EAON,CAACR,KAAD,CAPM,CAAT;AAUA,SAAO,CAACP,KAAD,EAAQK,QAAR,CAAP;AACD,CAjBM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery } from '../generated/graphql'\n\nconst initState = {\n  mainType: \"films\",\n  typeArr: []\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return { ...state, mainType: action.payload }\n    case 'typeArr':\n      return { ...state, typeArr: action.payload }\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const [fetchFilms, films] = useAllFilmsLazyQuery()\n  const [fetchPersons, persons] = useAllCharacterNamesLazyQuery()\n  const [fetchStarships, starships] = useAllStarshipsLazyQuery()\n\n  useEffect(() => {\n    if (state.mainType === \"films\") {\n      fetchFilms()\n      if (!films.loading && !films.error) {\n        dispatch({ type: 'typeArr', payload: films.data.allFilms })\n      }\n    }\n  }, [films])\n\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}