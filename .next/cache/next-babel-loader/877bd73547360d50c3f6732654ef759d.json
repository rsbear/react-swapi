{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { HttpLink, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport fetch from \"isomorphic-unfetch\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(Application) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(Application, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    var displayName = Application.displayName || Application.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || Application.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res; // Run all GraphQL queries in the component tree\n              // and extract the resulting data\n\n              apolloClient = ctx.ctx.apolloClient = initApolloClient({});\n\n              if (!Application.getInitialProps) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Application.getInitialProps(ctx));\n\n            case 5:\n              _context.t0 = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 8:\n              _context.t0 = {};\n\n            case 9:\n              pageProps = _context.t0;\n\n              if (!false) {\n                _context.next = 27;\n                break;\n              }\n\n              if (!(res && res.finished)) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 13:\n              if (!ssr) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.prev = 14;\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n            case 17:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                apolloClient: apolloClient,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 69\n                },\n                __self: this\n              })));\n\n            case 21:\n              _context.next = 26;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t1 = _context[\"catch\"](14);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n            case 26:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 27:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[14, 23]]);\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var link = new HttpLink({\n    uri: \"https://graphql.org/swapi-graphql/\",\n    // Server URL (must be absolute)\n    fetch: fetch\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n} // import React from \"react\";\n// import App from \"next/app\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import createApolloClient from \"./apolloClient\";\n// let globalApolloClient = null;\n// /**\n//  * @param {NextPageContext | NextAppContext} ctx\n//  */\n// export const initOnContext = ctx => {\n//   const inAppContext = Boolean(ctx.ctx);\n//   // We consider installing `withApollo({ ssr: true })` on global App level\n//   // as antipattern since it disables project wide Automatic Static Optimization.\n//   if (process.env.NODE_ENV === \"development\") {\n//     if (inAppContext) {\n//       console.warn(\n//         \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n//           \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n//       );\n//     }\n//   }\n//   // Initialize ApolloClient if not already done\n//   const apolloClient =\n//     ctx.apolloClient ||\n//     initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n//   apolloClient.toJSON = () => null;\n//   ctx.apolloClient = apolloClient;\n//   if (inAppContext) {\n//     ctx.ctx.apolloClient = apolloClient;\n//   }\n//   return ctx;\n// };\n// /**\n//  * @param  {NormalizedCacheObject} initialState\n//  * @param  {NextPageContext} ctx\n//  */\n// const initApolloClient = (initialState, ctx) => {\n//   if (typeof window === \"undefined\") {\n//     return createApolloClient(initialState, ctx);\n//   }\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState, ctx);\n//   }\n//   return globalApolloClient;\n// };\n// /**\n//  * Creates a withApollo HOC\n//  * @param  {Object} withApolloOptions\n//  * @param  {Boolean} [withApolloOptions.ssr=false]\n//  * @returns {(PageComponent: ReactNode) => ReactNode}\n//  */\n// export const withApollo = ({ ssr = false } = {}) => PageComponent => {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     let client;\n//     if (apolloClient) {\n//       // Happens on: getDataFromTree & next.js ssr\n//       client = apolloClient;\n//     } else {\n//       // Happens on: next.js csr\n//       client = initApolloClient(apolloState, undefined);\n//     }\n//     return <PageComponent {...pageProps} client={client} />;\n//   };\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== \"production\") {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || \"Component\";\n//     WithApollo.displayName = `withApollo(${displayName})`;\n//   }\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const inAppContext = Boolean(ctx.ctx);\n//       const { apolloClient } = initOnContext(ctx);\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {};\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx);\n//       } else if (inAppContext) {\n//         pageProps = await App.getInitialProps(ctx);\n//       }\n//       // Only on the server:\n//       if (typeof window === \"undefined\") {\n//         const { AppTree } = ctx;\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps;\n//         }\n//         if (ssr && AppTree) {\n//           try {\n//             const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n//             // Since AppComponents and PageComponents have different context types\n//             // we need to modify their props a little.\n//             let props;\n//             if (inAppContext) {\n//               props = { ...pageProps, apolloClient };\n//             } else {\n//               props = { pageProps: { ...pageProps, apolloClient } };\n//             }\n//             await getDataFromTree(<AppTree {...props} />);\n//           } catch (error) {\n//             console.error(\"Error while running `getDataFromTree`\", error);\n//           }\n//         }\n//       }\n//       return {\n//         ...pageProps,\n//         apolloState: apolloClient.cache.extract(),\n//         apolloClient: ctx.apolloClient\n//       };\n//     };\n//   }\n//   return WithApollo;\n// };","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx"],"names":["React","Head","HttpLink","InMemoryCache","ApolloClient","fetch","isServer","withApollo","Application","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","link","uri","ssrMode","restore"],"mappings":"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AKA,SAASsB,kBAAT,GAA+C;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AAC7C,MAAMC,IAAI,GAAG,IAAIjC,QAAJ,CAAa;AACxBkC,IAAAA,GAAG,EAAE,oCADmB;AACmB;AAC3C/B,IAAAA,KAAK,EAALA;AAFwB,GAAb,CAAb;AAKA,SAAO,IAAID,YAAJ,CAAiB;AACtBiC,IAAAA,OAAO,OADe;AAEtBF,IAAAA,IAAI,EAAEA,IAFgB;AAGtBL,IAAAA,KAAK,EAAE,IAAI3B,aAAJ,GAAoBmC,OAApB,CAA4BJ,YAA5B;AAHe,GAAjB,CAAP;AAKD,C,CACD;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { HttpLink, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(Application: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return <Application {...pageProps} apolloClient={client} />;\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      Application.displayName || Application.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}));\n\n      const pageProps = Application.getInitialProps\n        ? await Application.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<any> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}) {\n  const link = new HttpLink({\n    uri: \"https://graphql.org/swapi-graphql/\", // Server URL (must be absolute)\n    fetch\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n// import React from \"react\";\n// import App from \"next/app\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import createApolloClient from \"./apolloClient\";\n\n// let globalApolloClient = null;\n\n// /**\n//  * @param {NextPageContext | NextAppContext} ctx\n//  */\n// export const initOnContext = ctx => {\n//   const inAppContext = Boolean(ctx.ctx);\n\n//   // We consider installing `withApollo({ ssr: true })` on global App level\n//   // as antipattern since it disables project wide Automatic Static Optimization.\n//   if (process.env.NODE_ENV === \"development\") {\n//     if (inAppContext) {\n//       console.warn(\n//         \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n//           \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n//       );\n//     }\n//   }\n\n//   // Initialize ApolloClient if not already done\n//   const apolloClient =\n//     ctx.apolloClient ||\n//     initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n//   apolloClient.toJSON = () => null;\n\n//   ctx.apolloClient = apolloClient;\n//   if (inAppContext) {\n//     ctx.ctx.apolloClient = apolloClient;\n//   }\n\n//   return ctx;\n// };\n\n// /**\n//  * @param  {NormalizedCacheObject} initialState\n//  * @param  {NextPageContext} ctx\n//  */\n// const initApolloClient = (initialState, ctx) => {\n//   if (typeof window === \"undefined\") {\n//     return createApolloClient(initialState, ctx);\n//   }\n\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState, ctx);\n//   }\n\n//   return globalApolloClient;\n// };\n\n// /**\n//  * Creates a withApollo HOC\n//  * @param  {Object} withApolloOptions\n//  * @param  {Boolean} [withApolloOptions.ssr=false]\n//  * @returns {(PageComponent: ReactNode) => ReactNode}\n//  */\n// export const withApollo = ({ ssr = false } = {}) => PageComponent => {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     let client;\n//     if (apolloClient) {\n//       // Happens on: getDataFromTree & next.js ssr\n//       client = apolloClient;\n//     } else {\n//       // Happens on: next.js csr\n//       client = initApolloClient(apolloState, undefined);\n//     }\n\n//     return <PageComponent {...pageProps} client={client} />;\n//   };\n\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== \"production\") {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || \"Component\";\n//     WithApollo.displayName = `withApollo(${displayName})`;\n//   }\n\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const inAppContext = Boolean(ctx.ctx);\n//       const { apolloClient } = initOnContext(ctx);\n\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {};\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx);\n//       } else if (inAppContext) {\n//         pageProps = await App.getInitialProps(ctx);\n//       }\n\n//       // Only on the server:\n//       if (typeof window === \"undefined\") {\n//         const { AppTree } = ctx;\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps;\n//         }\n\n//         if (ssr && AppTree) {\n//           try {\n//             const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n//             // Since AppComponents and PageComponents have different context types\n//             // we need to modify their props a little.\n//             let props;\n//             if (inAppContext) {\n//               props = { ...pageProps, apolloClient };\n//             } else {\n//               props = { pageProps: { ...pageProps, apolloClient } };\n//             }\n\n//             await getDataFromTree(<AppTree {...props} />);\n//           } catch (error) {\n//             console.error(\"Error while running `getDataFromTree`\", error);\n//           }\n//         }\n//       }\n\n//       return {\n//         ...pageProps,\n//         apolloState: apolloClient.cache.extract(),\n//         apolloClient: ctx.apolloClient\n//       };\n//     };\n//   }\n\n//   return WithApollo;\n// };\n"]},"metadata":{},"sourceType":"module"}