{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\";\nvar globalApolloClient = null;\n/**\n * @param {NextPageContext | NextAppContext} ctx\n */\n\nexport var initOnContext = function initOnContext(ctx) {\n  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn(\"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" + \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\");\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = function () {\n    return null;\n  };\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nvar initApolloClient = function initApolloClient(initialState, ctx) {\n  if (false) {\n    return createApolloClient(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Creates a withApollo HOC\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\n\nexport var withApollo = function withApollo() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref2) {\n      var apolloClient = _ref2.apolloClient,\n          apolloState = _ref2.apolloState,\n          pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n      var client;\n\n      if (apolloClient) {\n        // Happens on: getDataFromTree & next.js ssr\n        client = apolloClient;\n      } else {\n        // Happens on: next.js csr\n        client = initApolloClient(apolloState, undefined);\n      }\n\n      return __jsx(ApolloProvider, {\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, __jsx(PageComponent, _extends({}, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })));\n    }; // Set the correct displayName in development\n\n\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n      WithApollo.getInitialProps = function _callee(ctx) {\n        var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _ref3, getDataFromTree, props;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                inAppContext = Boolean(ctx.ctx);\n                _initOnContext = initOnContext(ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n              case 6:\n                pageProps = _context.sent;\n                _context.next = 13;\n                break;\n\n              case 9:\n                if (!inAppContext) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 12;\n                return _regeneratorRuntime.awrap(App.getInitialProps(ctx));\n\n              case 12:\n                pageProps = _context.sent;\n\n              case 13:\n                if (!false) {\n                  _context.next = 31;\n                  break;\n                }\n\n                AppTree = ctx.AppTree;\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 17:\n                if (!(ssr && AppTree)) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _context.prev = 18;\n                _context.next = 21;\n                return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n              case 21:\n                _ref3 = _context.sent;\n                getDataFromTree = _ref3.getDataFromTree;\n\n                if (inAppContext) {\n                  props = _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  });\n                } else {\n                  props = {\n                    pageProps: _objectSpread({}, pageProps, {\n                      apolloClient: apolloClient\n                    })\n                  };\n                }\n\n                _context.next = 26;\n                return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, _extends({}, props, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 120\n                  },\n                  __self: this\n                }))));\n\n              case 26:\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](18);\n                console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n              case 31:\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloClient.cache.extract(),\n                  apolloClient: ctx.apolloClient\n                }));\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, [[18, 28]]);\n      };\n    }\n\n    return WithApollo;\n  };\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx"],"names":["React","App","ApolloProvider","createApolloClient","globalApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","cache","extract"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\";\n\nlet globalApolloClient = null;\n\n/**\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === \"development\") {\n    if (inAppContext) {\n      console.warn(\n        \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n          \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient ||\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = () => null;\n\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\n/**\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState, ctx) => {\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\n/**\n * Creates a withApollo HOC\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => PageComponent => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === \"undefined\") {\n        const { AppTree } = ctx;\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        if (ssr && AppTree) {\n          try {\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n      }\n\n      return {\n        ...pageProps,\n        apolloState: apolloClient.cache.extract(),\n        apolloClient: ctx.apolloClient\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}