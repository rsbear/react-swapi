{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useReducer } from \"react\";\nimport { useAllStarshipsQuery, useAllFilmsQuery, useAllPersonsQuery } from \"../generated/graphql\";\nimport { useRouter } from 'next/router';\nvar initState = {\n  isLoading: true,\n  browseType: \"films\",\n  mainList: [],\n  characterList: [],\n  starshipsList: [],\n  filterByCharacter: \"\",\n  filterByStarship: \"\"\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"setLoading\":\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case \"setBrowseType\":\n      return _objectSpread({}, state, {\n        browseType: action.payload\n      });\n\n    case \"setMainList\":\n      return _objectSpread({}, state, {\n        mainList: action.payload,\n        isLoading: false\n      });\n\n    case \"characterList\":\n      return _objectSpread({}, state, {\n        characterList: action.payload\n      });\n\n    case \"starshipsList\":\n      return _objectSpread({}, state, {\n        starshipsList: action.payload\n      });\n\n    case \"setFilterByCharacter\":\n      return _objectSpread({}, state, {\n        filterByCharacter: action.payload\n      });\n\n    case \"setFilterByStarship\":\n      return _objectSpread({}, state, {\n        filterByStarship: action.payload\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  var _useReducer = useReducer(reducer, initState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var router = useRouter();\n  var films = useAllFilmsQuery();\n  var persons = useAllPersonsQuery();\n  var starships = useAllStarshipsQuery();\n  useEffect(function () {\n    if (persons.loading) {\n      dispatch({\n        type: 'setLoading'\n      });\n    } else if (!persons.error && persons.data) {\n      var personsArr = persons.data.allPersons.map(function (p) {\n        return p.name;\n      });\n      dispatch({\n        type: \"characterList\",\n        payload: personsArr\n      });\n    }\n  }, [persons, starships]);\n  useEffect(function () {\n    if (starships.loading) {\n      dispatch({\n        type: 'setLoading'\n      });\n    } else if (!starships.error && starships.data) {\n      var starshipsArr = starships.data.allStarships.map(function (s) {\n        return s.name;\n      });\n      dispatch({\n        type: \"starshipsList\",\n        payload: starshipsArr\n      });\n    }\n  }, [starships]);\n  useEffect(function () {\n    if (state.browseType === \"films\") {\n      if (films.loading) {\n        dispatch({\n          type: \"setLoading\"\n        });\n      } else if (!films.error && films.data) {\n        dispatch({\n          type: \"setMainList\",\n          payload: films.data.allFilms\n        });\n      }\n    }\n  }, [films, state.browseType]);\n  useEffect(function () {\n    if (state.browseType === \"persons\") {\n      if (persons.loading) {\n        dispatch({\n          type: \"setLoading\"\n        });\n      } else if (!persons.error && persons.data) {\n        dispatch({\n          type: \"setMainList\",\n          payload: persons.data.allPersons\n        });\n      }\n    }\n  }, [persons, state.browseType]);\n  useEffect(function () {\n    if (state.browseType === \"starships\") {\n      if (starships.loading) {\n        dispatch({\n          type: \"setLoading\"\n        });\n      } else if (!starships.error && starships.data) {\n        dispatch({\n          type: \"setMainList\",\n          payload: starships.data.allStarships\n        });\n      }\n    }\n  }, [starships, state.browseType]);\n  useEffect(function () {\n    if (state.browseType === \"films\") {\n      if (!films.loading && !films.error) {\n        var newArr = [];\n        films.data.allFilms.forEach(function (x) {\n          var charMap = x.characters.map(function (c) {\n            return c.name;\n          });\n\n          if (charMap.includes(state.filterByCharacter)) {\n            newArr.push(x);\n          }\n        });\n        dispatch({\n          type: 'setMainList',\n          payload: newArr\n        });\n      }\n    }\n  }, [state.filterByCharacter]);\n  useEffect(function () {\n    if (state.browseType === \"films\") {\n      if (!films.loading && !films.error) {\n        var newArr = [];\n        films.data.allFilms.forEach(function (x) {\n          var shipMap = x.starships.map(function (c) {\n            return c.name;\n          });\n\n          if (shipMap.includes(state.filterByStarship)) {\n            newArr.push(x);\n          }\n        });\n        dispatch({\n          type: 'setMainList',\n          payload: newArr\n        });\n      }\n    }\n  }, [state.filterByStarship]);\n\n  function handleBrowse(e) {\n    e.preventDefault();\n    dispatch({\n      type: \"setBrowseType\",\n      payload: e.target.value\n    });\n    dispatch({\n      type: \"setMainList\",\n      payload: []\n    });\n  }\n\n  var handlers = {\n    handleBrowse: handleBrowse\n  };\n  return [state, dispatch, handlers];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllStarshipsQuery","useAllFilmsQuery","useAllPersonsQuery","useRouter","initState","isLoading","browseType","mainList","characterList","starshipsList","filterByCharacter","filterByStarship","reducer","state","action","type","payload","useTypeFilter","dispatch","router","films","persons","starships","loading","error","data","personsArr","allPersons","map","p","name","starshipsArr","allStarships","s","allFilms","newArr","forEach","x","charMap","characters","c","includes","push","shipMap","handleBrowse","e","preventDefault","target","value","handlers"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport {\n  useAllStarshipsQuery,\n  useAllFilmsQuery,\n  useAllPersonsQuery\n} from \"../generated/graphql\";\nimport { useRouter } from 'next/router'\n\nconst initState = {\n  isLoading: true,\n  browseType: \"films\",\n  mainList: [],\n  characterList: [],\n  starshipsList: [],\n  filterByCharacter: \"\",\n  filterByStarship: \"\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"setLoading\":\n      return { ...state, isLoading: true };\n    case \"setBrowseType\":\n      return { ...state, browseType: action.payload };\n    case \"setMainList\":\n      return { ...state, mainList: action.payload, isLoading: false };\n    case \"characterList\":\n      return { ...state, characterList: action.payload };\n    case \"starshipsList\":\n      return { ...state, starshipsList: action.payload };\n    case \"setFilterByCharacter\":\n      return { ...state, filterByCharacter: action.payload };\n    case \"setFilterByStarship\":\n      return { ...state, filterByStarship: action.payload };\n    default:\n      return [];\n  }\n};\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n  const router = useRouter()\n  const films = useAllFilmsQuery();\n  const persons = useAllPersonsQuery();\n  const starships = useAllStarshipsQuery();\n\n  useEffect(() => {\n    if (persons.loading) {\n      dispatch({ type: 'setLoading' })\n    } else if (!persons.error && persons.data) {\n      let personsArr = persons.data.allPersons.map(p => p.name)\n      dispatch({ type: \"characterList\", payload: personsArr })\n    }\n  }, [persons, starships]);\n\n  useEffect(() => {\n    if (starships.loading) {\n      dispatch({ type: 'setLoading' })\n    } else if (!starships.error && starships.data) {\n      let starshipsArr = starships.data.allStarships.map(s => s.name)\n      dispatch({ type: \"starshipsList\", payload: starshipsArr })\n\n    }\n  }, [starships])\n\n  useEffect(() => {\n    if (state.browseType === \"films\") {\n      if (films.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!films.error && films.data) {\n        dispatch({ type: \"setMainList\", payload: films.data.allFilms });\n      }\n    }\n  }, [films, state.browseType]);\n\n  useEffect(() => {\n    if (state.browseType === \"persons\") {\n      if (persons.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!persons.error && persons.data) {\n        dispatch({ type: \"setMainList\", payload: persons.data.allPersons });\n      }\n    }\n  }, [persons, state.browseType]);\n\n  useEffect(() => {\n    if (state.browseType === \"starships\") {\n      if (starships.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!starships.error && starships.data) {\n        dispatch({ type: \"setMainList\", payload: starships.data.allStarships });\n      }\n    }\n  }, [starships, state.browseType]);\n\n\n  useEffect(() => {\n    if (state.browseType === \"films\") {\n      if (!films.loading && !films.error) {\n        let newArr = []\n\n        films.data.allFilms.forEach((x) => {\n          const charMap = x.characters.map(c => c.name)\n          if (charMap.includes(state.filterByCharacter)) {\n            newArr.push(x)\n          }\n        })\n        dispatch({ type: 'setMainList', payload: newArr })\n      }\n    }\n  }, [state.filterByCharacter])\n\n  useEffect(() => {\n    if (state.browseType === \"films\") {\n      if (!films.loading && !films.error) {\n        let newArr = []\n\n        films.data.allFilms.forEach((x) => {\n          const shipMap = x.starships.map(c => c.name)\n          if (shipMap.includes(state.filterByStarship)) {\n            newArr.push(x)\n          }\n        })\n        dispatch({ type: 'setMainList', payload: newArr })\n      }\n    }\n  }, [state.filterByStarship])\n\n  function handleBrowse(e) {\n    e.preventDefault()\n    dispatch({ type: \"setBrowseType\", payload: e.target.value });\n    dispatch({ type: \"setMainList\", payload: [] });\n  }\n\n  const handlers = {\n    handleBrowse\n  }\n\n  return [state, dispatch, handlers];\n};\n\n"]},"metadata":{},"sourceType":"module"}