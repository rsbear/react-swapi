{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useReducer } from \"react\";\nimport { useAllStarshipsQuery, useAllCharacterNamesQuery, useAllFilmsQuery } from \"../generated/graphql\";\nvar initState = {\n  isLoading: true,\n  browseType: \"films\",\n  list: []\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"setLoading\":\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case \"setBrowse\":\n      return _objectSpread({}, state, {\n        browseType: action.payload\n      });\n\n    case \"setList\":\n      return _objectSpread({}, state, {\n        list: action.payload,\n        isLoading: false\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  var _useReducer = useReducer(reducer, initState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var films = useAllFilmsQuery();\n  var persons = useAllCharacterNamesQuery();\n  var starships = useAllStarshipsQuery();\n  useEffect(function () {}, [state.browseType]);\n  useEffect(function () {\n    if (state.mainType === \"films\") {\n      if (films.loading) {\n        dispatch({\n          type: \"setLoading\"\n        });\n      } else if (!films.error && films.data) {\n        dispatch({\n          type: \"setList\",\n          payload: films.data.allFilms\n        });\n      }\n    }\n  }, [films, state.mainType]);\n  useEffect(function () {\n    if (state.mainType === \"persons\") {\n      if (persons.loading) {\n        dispatch({\n          type: \"setLoading\"\n        });\n      } else if (!persons.error && persons.data) {\n        dispatch({\n          type: \"setList\",\n          payload: persons.data.allPersons\n        });\n      }\n    }\n  }, [persons, state.mainType]);\n  useEffect(function () {\n    if (state.mainType === \"starships\") {\n      if (starships.loading) {\n        dispatch({\n          type: \"setLoading\"\n        });\n      } else if (!starships.error && starships.data) {\n        dispatch({\n          type: \"setList\",\n          payload: starships.data.allStarships\n        });\n      }\n    }\n  }, [starships, state.mainType]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllStarshipsQuery","useAllCharacterNamesQuery","useAllFilmsQuery","initState","isLoading","browseType","list","reducer","state","action","type","payload","useTypeFilter","dispatch","films","persons","starships","mainType","loading","error","data","allFilms","allPersons","allStarships"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport {\n  useAllFilmsLazyQuery,\n  useAllCharacterNamesLazyQuery,\n  useAllStarshipsLazyQuery,\n  useAllStarshipsQuery,\n  useAllCharacterNamesQuery,\n  useAllFilmsQuery\n} from \"../generated/graphql\";\n\nconst initState = {\n  isLoading: true,\n  browseType: \"films\",\n  list: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"setLoading\":\n      return { ...state, isLoading: true };\n    case \"setBrowse\":\n      return { ...state, browseType: action.payload };\n    case \"setList\":\n      return { ...state, list: action.payload, isLoading: false };\n    default:\n      return [];\n  }\n};\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n  const films = useAllFilmsQuery();\n  const persons = useAllCharacterNamesQuery();\n  const starships = useAllStarshipsQuery();\n\n  useEffect(() => { }, [state.browseType]);\n\n  useEffect(() => {\n    if (state.mainType === \"films\") {\n      if (films.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!films.error && films.data) {\n        dispatch({ type: \"setList\", payload: films.data.allFilms });\n      }\n    }\n  }, [films, state.mainType]);\n\n  useEffect(() => {\n    if (state.mainType === \"persons\") {\n      if (persons.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!persons.error && persons.data) {\n        dispatch({ type: \"setList\", payload: persons.data.allPersons });\n      }\n    }\n  }, [persons, state.mainType]);\n\n  useEffect(() => {\n    if (state.mainType === \"starships\") {\n      if (starships.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!starships.error && starships.data) {\n        dispatch({ type: \"setList\", payload: starships.data.allStarships });\n      }\n    }\n  }, [starships, state.mainType]);\n\n  return [state, dispatch];\n};\n\n"]},"metadata":{},"sourceType":"module"}