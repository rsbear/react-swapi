{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query AllStarships {\\n  allStarships {\\n    id\\n    name\\n  }\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query AllFilms {\\n  allFilms {\\n    id\\n    title\\n  }\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query AllCharacterNames {\\n  allPersons {\\n    id\\n    name\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/client';\nexport var _ModelMutationType;\n\n(function (_ModelMutationType) {\n  _ModelMutationType[\"Created\"] = \"CREATED\";\n  _ModelMutationType[\"Updated\"] = \"UPDATED\";\n  _ModelMutationType[\"Deleted\"] = \"DELETED\";\n})(_ModelMutationType || (_ModelMutationType = {}));\n\nexport var AssetOrderBy;\n\n(function (AssetOrderBy) {\n  AssetOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  AssetOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  AssetOrderBy[\"FileNameAsc\"] = \"fileName_ASC\";\n  AssetOrderBy[\"FileNameDesc\"] = \"fileName_DESC\";\n  AssetOrderBy[\"HandleAsc\"] = \"handle_ASC\";\n  AssetOrderBy[\"HandleDesc\"] = \"handle_DESC\";\n  AssetOrderBy[\"HeightAsc\"] = \"height_ASC\";\n  AssetOrderBy[\"HeightDesc\"] = \"height_DESC\";\n  AssetOrderBy[\"IdAsc\"] = \"id_ASC\";\n  AssetOrderBy[\"IdDesc\"] = \"id_DESC\";\n  AssetOrderBy[\"MimeTypeAsc\"] = \"mimeType_ASC\";\n  AssetOrderBy[\"MimeTypeDesc\"] = \"mimeType_DESC\";\n  AssetOrderBy[\"SizeAsc\"] = \"size_ASC\";\n  AssetOrderBy[\"SizeDesc\"] = \"size_DESC\";\n  AssetOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  AssetOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n  AssetOrderBy[\"UrlAsc\"] = \"url_ASC\";\n  AssetOrderBy[\"UrlDesc\"] = \"url_DESC\";\n  AssetOrderBy[\"WidthAsc\"] = \"width_ASC\";\n  AssetOrderBy[\"WidthDesc\"] = \"width_DESC\";\n})(AssetOrderBy || (AssetOrderBy = {}));\n\nexport var FilmOrderBy;\n\n(function (FilmOrderBy) {\n  FilmOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  FilmOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  FilmOrderBy[\"DirectorAsc\"] = \"director_ASC\";\n  FilmOrderBy[\"DirectorDesc\"] = \"director_DESC\";\n  FilmOrderBy[\"EpisodeIdAsc\"] = \"episodeId_ASC\";\n  FilmOrderBy[\"EpisodeIdDesc\"] = \"episodeId_DESC\";\n  FilmOrderBy[\"IdAsc\"] = \"id_ASC\";\n  FilmOrderBy[\"IdDesc\"] = \"id_DESC\";\n  FilmOrderBy[\"IsPublishedAsc\"] = \"isPublished_ASC\";\n  FilmOrderBy[\"IsPublishedDesc\"] = \"isPublished_DESC\";\n  FilmOrderBy[\"OpeningCrawlAsc\"] = \"openingCrawl_ASC\";\n  FilmOrderBy[\"OpeningCrawlDesc\"] = \"openingCrawl_DESC\";\n  FilmOrderBy[\"ReleaseDateAsc\"] = \"releaseDate_ASC\";\n  FilmOrderBy[\"ReleaseDateDesc\"] = \"releaseDate_DESC\";\n  FilmOrderBy[\"TitleAsc\"] = \"title_ASC\";\n  FilmOrderBy[\"TitleDesc\"] = \"title_DESC\";\n  FilmOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  FilmOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n})(FilmOrderBy || (FilmOrderBy = {}));\n\nexport var Person_Eye_Color;\n\n(function (Person_Eye_Color) {\n  Person_Eye_Color[\"Unknown\"] = \"UNKNOWN\";\n  Person_Eye_Color[\"Blue\"] = \"BLUE\";\n  Person_Eye_Color[\"Yellow\"] = \"YELLOW\";\n  Person_Eye_Color[\"Red\"] = \"RED\";\n  Person_Eye_Color[\"Brown\"] = \"BROWN\";\n  Person_Eye_Color[\"Bluegrey\"] = \"BLUEGREY\";\n  Person_Eye_Color[\"Black\"] = \"BLACK\";\n  Person_Eye_Color[\"Orange\"] = \"ORANGE\";\n  Person_Eye_Color[\"Hazel\"] = \"HAZEL\";\n  Person_Eye_Color[\"Pink\"] = \"PINK\";\n  Person_Eye_Color[\"Gold\"] = \"GOLD\";\n  Person_Eye_Color[\"Green\"] = \"GREEN\";\n  Person_Eye_Color[\"White\"] = \"WHITE\";\n  Person_Eye_Color[\"Dark\"] = \"DARK\";\n})(Person_Eye_Color || (Person_Eye_Color = {}));\n\nexport var Person_Gender;\n\n(function (Person_Gender) {\n  Person_Gender[\"Unknown\"] = \"UNKNOWN\";\n  Person_Gender[\"Male\"] = \"MALE\";\n  Person_Gender[\"Female\"] = \"FEMALE\";\n  Person_Gender[\"Hermaphrodite\"] = \"HERMAPHRODITE\";\n})(Person_Gender || (Person_Gender = {}));\n\nexport var Person_Hair_Color;\n\n(function (Person_Hair_Color) {\n  Person_Hair_Color[\"Auburn\"] = \"AUBURN\";\n  Person_Hair_Color[\"Black\"] = \"BLACK\";\n  Person_Hair_Color[\"Blonde\"] = \"BLONDE\";\n  Person_Hair_Color[\"Brown\"] = \"BROWN\";\n  Person_Hair_Color[\"Grey\"] = \"GREY\";\n  Person_Hair_Color[\"Unknown\"] = \"UNKNOWN\";\n  Person_Hair_Color[\"White\"] = \"WHITE\";\n})(Person_Hair_Color || (Person_Hair_Color = {}));\n\nexport var Person_Skin_Color;\n\n(function (Person_Skin_Color) {\n  Person_Skin_Color[\"Unknown\"] = \"UNKNOWN\";\n  Person_Skin_Color[\"Fair\"] = \"FAIR\";\n  Person_Skin_Color[\"Gold\"] = \"GOLD\";\n  Person_Skin_Color[\"White\"] = \"WHITE\";\n  Person_Skin_Color[\"Light\"] = \"LIGHT\";\n  Person_Skin_Color[\"Green\"] = \"GREEN\";\n  Person_Skin_Color[\"Greentan\"] = \"GREENTAN\";\n  Person_Skin_Color[\"Pale\"] = \"PALE\";\n  Person_Skin_Color[\"Metal\"] = \"METAL\";\n  Person_Skin_Color[\"Dark\"] = \"DARK\";\n  Person_Skin_Color[\"Brownmottle\"] = \"BROWNMOTTLE\";\n  Person_Skin_Color[\"Brown\"] = \"BROWN\";\n  Person_Skin_Color[\"Grey\"] = \"GREY\";\n  Person_Skin_Color[\"Mottledgreen\"] = \"MOTTLEDGREEN\";\n  Person_Skin_Color[\"Orange\"] = \"ORANGE\";\n  Person_Skin_Color[\"Blue\"] = \"BLUE\";\n  Person_Skin_Color[\"Red\"] = \"RED\";\n  Person_Skin_Color[\"Yellow\"] = \"YELLOW\";\n  Person_Skin_Color[\"Tan\"] = \"TAN\";\n  Person_Skin_Color[\"Silver\"] = \"SILVER\";\n})(Person_Skin_Color || (Person_Skin_Color = {}));\n\nexport var PersonOrderBy;\n\n(function (PersonOrderBy) {\n  PersonOrderBy[\"BirthYearAsc\"] = \"birthYear_ASC\";\n  PersonOrderBy[\"BirthYearDesc\"] = \"birthYear_DESC\";\n  PersonOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  PersonOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  PersonOrderBy[\"GenderAsc\"] = \"gender_ASC\";\n  PersonOrderBy[\"GenderDesc\"] = \"gender_DESC\";\n  PersonOrderBy[\"HeightAsc\"] = \"height_ASC\";\n  PersonOrderBy[\"HeightDesc\"] = \"height_DESC\";\n  PersonOrderBy[\"IdAsc\"] = \"id_ASC\";\n  PersonOrderBy[\"IdDesc\"] = \"id_DESC\";\n  PersonOrderBy[\"IsPublishedAsc\"] = \"isPublished_ASC\";\n  PersonOrderBy[\"IsPublishedDesc\"] = \"isPublished_DESC\";\n  PersonOrderBy[\"MassAsc\"] = \"mass_ASC\";\n  PersonOrderBy[\"MassDesc\"] = \"mass_DESC\";\n  PersonOrderBy[\"NameAsc\"] = \"name_ASC\";\n  PersonOrderBy[\"NameDesc\"] = \"name_DESC\";\n  PersonOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  PersonOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n})(PersonOrderBy || (PersonOrderBy = {}));\n\nexport var PlanetOrderBy;\n\n(function (PlanetOrderBy) {\n  PlanetOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  PlanetOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  PlanetOrderBy[\"DiameterAsc\"] = \"diameter_ASC\";\n  PlanetOrderBy[\"DiameterDesc\"] = \"diameter_DESC\";\n  PlanetOrderBy[\"GravityAsc\"] = \"gravity_ASC\";\n  PlanetOrderBy[\"GravityDesc\"] = \"gravity_DESC\";\n  PlanetOrderBy[\"IdAsc\"] = \"id_ASC\";\n  PlanetOrderBy[\"IdDesc\"] = \"id_DESC\";\n  PlanetOrderBy[\"IsPublishedAsc\"] = \"isPublished_ASC\";\n  PlanetOrderBy[\"IsPublishedDesc\"] = \"isPublished_DESC\";\n  PlanetOrderBy[\"NameAsc\"] = \"name_ASC\";\n  PlanetOrderBy[\"NameDesc\"] = \"name_DESC\";\n  PlanetOrderBy[\"OrbitalPeriodAsc\"] = \"orbitalPeriod_ASC\";\n  PlanetOrderBy[\"OrbitalPeriodDesc\"] = \"orbitalPeriod_DESC\";\n  PlanetOrderBy[\"PopulationAsc\"] = \"population_ASC\";\n  PlanetOrderBy[\"PopulationDesc\"] = \"population_DESC\";\n  PlanetOrderBy[\"RotationPeriodAsc\"] = \"rotationPeriod_ASC\";\n  PlanetOrderBy[\"RotationPeriodDesc\"] = \"rotationPeriod_DESC\";\n  PlanetOrderBy[\"SurfaceWaterAsc\"] = \"surfaceWater_ASC\";\n  PlanetOrderBy[\"SurfaceWaterDesc\"] = \"surfaceWater_DESC\";\n  PlanetOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  PlanetOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n})(PlanetOrderBy || (PlanetOrderBy = {}));\n\nexport var Species_Eye_Color;\n\n(function (Species_Eye_Color) {\n  Species_Eye_Color[\"Amber\"] = \"AMBER\";\n  Species_Eye_Color[\"Black\"] = \"BLACK\";\n  Species_Eye_Color[\"Blue\"] = \"BLUE\";\n  Species_Eye_Color[\"Brown\"] = \"BROWN\";\n  Species_Eye_Color[\"Gold\"] = \"GOLD\";\n  Species_Eye_Color[\"Green\"] = \"GREEN\";\n  Species_Eye_Color[\"Grey\"] = \"GREY\";\n  Species_Eye_Color[\"Hazel\"] = \"HAZEL\";\n  Species_Eye_Color[\"Indigo\"] = \"INDIGO\";\n  Species_Eye_Color[\"Orange\"] = \"ORANGE\";\n  Species_Eye_Color[\"Pink\"] = \"PINK\";\n  Species_Eye_Color[\"Red\"] = \"RED\";\n  Species_Eye_Color[\"Silver\"] = \"SILVER\";\n  Species_Eye_Color[\"Unknown\"] = \"UNKNOWN\";\n  Species_Eye_Color[\"Yellow\"] = \"YELLOW\";\n  Species_Eye_Color[\"Golden\"] = \"GOLDEN\";\n})(Species_Eye_Color || (Species_Eye_Color = {}));\n\nexport var Species_Hair_Color;\n\n(function (Species_Hair_Color) {\n  Species_Hair_Color[\"Unknown\"] = \"UNKNOWN\";\n  Species_Hair_Color[\"Brown\"] = \"BROWN\";\n  Species_Hair_Color[\"White\"] = \"WHITE\";\n  Species_Hair_Color[\"Red\"] = \"RED\";\n  Species_Hair_Color[\"Black\"] = \"BLACK\";\n  Species_Hair_Color[\"Blonde\"] = \"BLONDE\";\n})(Species_Hair_Color || (Species_Hair_Color = {}));\n\nexport var Species_Skin_Color;\n\n(function (Species_Skin_Color) {\n  Species_Skin_Color[\"Blue\"] = \"BLUE\";\n  Species_Skin_Color[\"Brown\"] = \"BROWN\";\n  Species_Skin_Color[\"Caucasian\"] = \"CAUCASIAN\";\n  Species_Skin_Color[\"Dark\"] = \"DARK\";\n  Species_Skin_Color[\"Green\"] = \"GREEN\";\n  Species_Skin_Color[\"Grey\"] = \"GREY\";\n  Species_Skin_Color[\"Magenta\"] = \"MAGENTA\";\n  Species_Skin_Color[\"Orange\"] = \"ORANGE\";\n  Species_Skin_Color[\"Pale\"] = \"PALE\";\n  Species_Skin_Color[\"Palepink\"] = \"PALEPINK\";\n  Species_Skin_Color[\"Peach\"] = \"PEACH\";\n  Species_Skin_Color[\"Pink\"] = \"PINK\";\n  Species_Skin_Color[\"Purple\"] = \"PURPLE\";\n  Species_Skin_Color[\"Red\"] = \"RED\";\n  Species_Skin_Color[\"Tan\"] = \"TAN\";\n  Species_Skin_Color[\"Unknown\"] = \"UNKNOWN\";\n  Species_Skin_Color[\"White\"] = \"WHITE\";\n  Species_Skin_Color[\"Yellow\"] = \"YELLOW\";\n  Species_Skin_Color[\"Black\"] = \"BLACK\";\n  Species_Skin_Color[\"Asian\"] = \"ASIAN\";\n  Species_Skin_Color[\"Hispanic\"] = \"HISPANIC\";\n})(Species_Skin_Color || (Species_Skin_Color = {}));\n\nexport var SpeciesOrderBy;\n\n(function (SpeciesOrderBy) {\n  SpeciesOrderBy[\"AverageHeightAsc\"] = \"averageHeight_ASC\";\n  SpeciesOrderBy[\"AverageHeightDesc\"] = \"averageHeight_DESC\";\n  SpeciesOrderBy[\"AverageLifespanAsc\"] = \"averageLifespan_ASC\";\n  SpeciesOrderBy[\"AverageLifespanDesc\"] = \"averageLifespan_DESC\";\n  SpeciesOrderBy[\"ClassificationAsc\"] = \"classification_ASC\";\n  SpeciesOrderBy[\"ClassificationDesc\"] = \"classification_DESC\";\n  SpeciesOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  SpeciesOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  SpeciesOrderBy[\"DesignationAsc\"] = \"designation_ASC\";\n  SpeciesOrderBy[\"DesignationDesc\"] = \"designation_DESC\";\n  SpeciesOrderBy[\"IdAsc\"] = \"id_ASC\";\n  SpeciesOrderBy[\"IdDesc\"] = \"id_DESC\";\n  SpeciesOrderBy[\"IsPublishedAsc\"] = \"isPublished_ASC\";\n  SpeciesOrderBy[\"IsPublishedDesc\"] = \"isPublished_DESC\";\n  SpeciesOrderBy[\"LanguageAsc\"] = \"language_ASC\";\n  SpeciesOrderBy[\"LanguageDesc\"] = \"language_DESC\";\n  SpeciesOrderBy[\"NameAsc\"] = \"name_ASC\";\n  SpeciesOrderBy[\"NameDesc\"] = \"name_DESC\";\n  SpeciesOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  SpeciesOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n})(SpeciesOrderBy || (SpeciesOrderBy = {}));\n\nexport var StarshipOrderBy;\n\n(function (StarshipOrderBy) {\n  StarshipOrderBy[\"CargoCapacityAsc\"] = \"cargoCapacity_ASC\";\n  StarshipOrderBy[\"CargoCapacityDesc\"] = \"cargoCapacity_DESC\";\n  StarshipOrderBy[\"ClassAsc\"] = \"class_ASC\";\n  StarshipOrderBy[\"ClassDesc\"] = \"class_DESC\";\n  StarshipOrderBy[\"ConsumablesAsc\"] = \"consumables_ASC\";\n  StarshipOrderBy[\"ConsumablesDesc\"] = \"consumables_DESC\";\n  StarshipOrderBy[\"CostInCreditsAsc\"] = \"costInCredits_ASC\";\n  StarshipOrderBy[\"CostInCreditsDesc\"] = \"costInCredits_DESC\";\n  StarshipOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  StarshipOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  StarshipOrderBy[\"CrewAsc\"] = \"crew_ASC\";\n  StarshipOrderBy[\"CrewDesc\"] = \"crew_DESC\";\n  StarshipOrderBy[\"HyperdriveRatingAsc\"] = \"hyperdriveRating_ASC\";\n  StarshipOrderBy[\"HyperdriveRatingDesc\"] = \"hyperdriveRating_DESC\";\n  StarshipOrderBy[\"IdAsc\"] = \"id_ASC\";\n  StarshipOrderBy[\"IdDesc\"] = \"id_DESC\";\n  StarshipOrderBy[\"IsPublishedAsc\"] = \"isPublished_ASC\";\n  StarshipOrderBy[\"IsPublishedDesc\"] = \"isPublished_DESC\";\n  StarshipOrderBy[\"LengthAsc\"] = \"length_ASC\";\n  StarshipOrderBy[\"LengthDesc\"] = \"length_DESC\";\n  StarshipOrderBy[\"MaxAtmospheringSpeedAsc\"] = \"maxAtmospheringSpeed_ASC\";\n  StarshipOrderBy[\"MaxAtmospheringSpeedDesc\"] = \"maxAtmospheringSpeed_DESC\";\n  StarshipOrderBy[\"MgltAsc\"] = \"mglt_ASC\";\n  StarshipOrderBy[\"MgltDesc\"] = \"mglt_DESC\";\n  StarshipOrderBy[\"NameAsc\"] = \"name_ASC\";\n  StarshipOrderBy[\"NameDesc\"] = \"name_DESC\";\n  StarshipOrderBy[\"PassengersAsc\"] = \"passengers_ASC\";\n  StarshipOrderBy[\"PassengersDesc\"] = \"passengers_DESC\";\n  StarshipOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  StarshipOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n})(StarshipOrderBy || (StarshipOrderBy = {}));\n\nexport var VehicleOrderBy;\n\n(function (VehicleOrderBy) {\n  VehicleOrderBy[\"CargoCapacityAsc\"] = \"cargoCapacity_ASC\";\n  VehicleOrderBy[\"CargoCapacityDesc\"] = \"cargoCapacity_DESC\";\n  VehicleOrderBy[\"ClassAsc\"] = \"class_ASC\";\n  VehicleOrderBy[\"ClassDesc\"] = \"class_DESC\";\n  VehicleOrderBy[\"ConsumablesAsc\"] = \"consumables_ASC\";\n  VehicleOrderBy[\"ConsumablesDesc\"] = \"consumables_DESC\";\n  VehicleOrderBy[\"CostInCreditsAsc\"] = \"costInCredits_ASC\";\n  VehicleOrderBy[\"CostInCreditsDesc\"] = \"costInCredits_DESC\";\n  VehicleOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  VehicleOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  VehicleOrderBy[\"CrewAsc\"] = \"crew_ASC\";\n  VehicleOrderBy[\"CrewDesc\"] = \"crew_DESC\";\n  VehicleOrderBy[\"IdAsc\"] = \"id_ASC\";\n  VehicleOrderBy[\"IdDesc\"] = \"id_DESC\";\n  VehicleOrderBy[\"IsPublishedAsc\"] = \"isPublished_ASC\";\n  VehicleOrderBy[\"IsPublishedDesc\"] = \"isPublished_DESC\";\n  VehicleOrderBy[\"LengthAsc\"] = \"length_ASC\";\n  VehicleOrderBy[\"LengthDesc\"] = \"length_DESC\";\n  VehicleOrderBy[\"MaxAtmospheringSpeedAsc\"] = \"maxAtmospheringSpeed_ASC\";\n  VehicleOrderBy[\"MaxAtmospheringSpeedDesc\"] = \"maxAtmospheringSpeed_DESC\";\n  VehicleOrderBy[\"ModelAsc\"] = \"model_ASC\";\n  VehicleOrderBy[\"ModelDesc\"] = \"model_DESC\";\n  VehicleOrderBy[\"NameAsc\"] = \"name_ASC\";\n  VehicleOrderBy[\"NameDesc\"] = \"name_DESC\";\n  VehicleOrderBy[\"PassengersAsc\"] = \"passengers_ASC\";\n  VehicleOrderBy[\"PassengersDesc\"] = \"passengers_DESC\";\n  VehicleOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  VehicleOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n})(VehicleOrderBy || (VehicleOrderBy = {}));\n\nexport var AllCharacterNamesDocument = gql(_templateObject());\n/**\n * __useAllCharacterNamesQuery__\n *\n * To run a query within a React component, call `useAllCharacterNamesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllCharacterNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllCharacterNamesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllCharacterNamesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllCharacterNamesDocument, baseOptions);\n}\nexport function useAllCharacterNamesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllCharacterNamesDocument, baseOptions);\n}\nexport var AllFilmsDocument = gql(_templateObject2());\n/**\n * __useAllFilmsQuery__\n *\n * To run a query within a React component, call `useAllFilmsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllFilmsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllFilmsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllFilmsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllFilmsDocument, baseOptions);\n}\nexport function useAllFilmsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllFilmsDocument, baseOptions);\n}\nexport var AllStarshipsDocument = gql(_templateObject3());\n/**\n * __useAllStarshipsQuery__\n *\n * To run a query within a React component, call `useAllStarshipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllStarshipsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllStarshipsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllStarshipsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllStarshipsDocument, baseOptions);\n}\nexport function useAllStarshipsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllStarshipsDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","_ModelMutationType","AssetOrderBy","FilmOrderBy","Person_Eye_Color","Person_Gender","Person_Hair_Color","Person_Skin_Color","PersonOrderBy","PlanetOrderBy","Species_Eye_Color","Species_Hair_Color","Species_Skin_Color","SpeciesOrderBy","StarshipOrderBy","VehicleOrderBy","AllCharacterNamesDocument","useAllCharacterNamesQuery","baseOptions","useQuery","useAllCharacterNamesLazyQuery","useLazyQuery","AllFilmsDocument","useAllFilmsQuery","useAllFilmsLazyQuery","AllStarshipsDocument","useAllStarshipsQuery","useAllStarshipsLazyQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,gBAAlC;AAYA,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAkMZ,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAgjBZ,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAg3BZ,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAiBZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAOZ,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAUZ,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AA8JZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAmZZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAshBZ,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAmBZ,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AASZ,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AA+JZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AA8aZ,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AA4oBZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AA6QZ,OAAO,IAAMC,yBAAyB,GAAGjB,GAAH,mBAA/B;AASP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASkB,yBAAT,CAAmCC,WAAnC,EAA6I;AAC5I,SAAOlB,gBAAgB,CAACmB,QAAjB,CAAmFH,yBAAnF,EAA8GE,WAA9G,CAAP;AACD;AACP,OAAO,SAASE,6BAAT,CAAuCF,WAAvC,EAAqJ;AAClJ,SAAOlB,gBAAgB,CAACqB,YAAjB,CAAuFL,yBAAvF,EAAkHE,WAAlH,CAAP;AACD;AAIT,OAAO,IAAMI,gBAAgB,GAAGvB,GAAH,oBAAtB;AASP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASwB,gBAAT,CAA0BL,WAA1B,EAAkH;AACjH,SAAOlB,gBAAgB,CAACmB,QAAjB,CAAiEG,gBAAjE,EAAmFJ,WAAnF,CAAP;AACD;AACP,OAAO,SAASM,oBAAT,CAA8BN,WAA9B,EAA0H;AACvH,SAAOlB,gBAAgB,CAACqB,YAAjB,CAAqEC,gBAArE,EAAuFJ,WAAvF,CAAP;AACD;AAIT,OAAO,IAAMO,oBAAoB,GAAG1B,GAAH,oBAA1B;AASP;;;;;;;;;;;;;;;;AAeA,OAAO,SAAS2B,oBAAT,CAA8BR,WAA9B,EAA8H;AAC7H,SAAOlB,gBAAgB,CAACmB,QAAjB,CAAyEM,oBAAzE,EAA+FP,WAA/F,CAAP;AACD;AACP,OAAO,SAASS,wBAAT,CAAkCT,WAAlC,EAAsI;AACnI,SAAOlB,gBAAgB,CAACqB,YAAjB,CAA6EI,oBAA7E,EAAmGP,WAAnG,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport enum _ModelMutationType {\n  Created = 'CREATED',\n  Updated = 'UPDATED',\n  Deleted = 'DELETED'\n}\n\nexport type _QueryMeta = {\n   __typename?: '_QueryMeta',\n  count: Scalars['Int'],\n};\n\nexport type AddToFilmPlanetsPayload = {\n   __typename?: 'AddToFilmPlanetsPayload',\n  filmsFilm?: Maybe<Film>,\n  planetsPlanet?: Maybe<Planet>,\n};\n\nexport type AddToFilmSpeciesPayload = {\n   __typename?: 'AddToFilmSpeciesPayload',\n  filmsFilm?: Maybe<Film>,\n  speciesSpecies?: Maybe<Species>,\n};\n\nexport type AddToFilmStarshipsPayload = {\n   __typename?: 'AddToFilmStarshipsPayload',\n  filmsFilm?: Maybe<Film>,\n  starshipsStarship?: Maybe<Starship>,\n};\n\nexport type AddToFilmVehiclesPayload = {\n   __typename?: 'AddToFilmVehiclesPayload',\n  filmsFilm?: Maybe<Film>,\n  vehiclesVehicle?: Maybe<Vehicle>,\n};\n\nexport type AddToPeopleFilmPayload = {\n   __typename?: 'AddToPeopleFilmPayload',\n  charactersPerson?: Maybe<Person>,\n  filmsFilm?: Maybe<Film>,\n};\n\nexport type AddToPeoplePlanetPayload = {\n   __typename?: 'AddToPeoplePlanetPayload',\n  residentsPerson?: Maybe<Person>,\n  homeworldPlanet?: Maybe<Planet>,\n};\n\nexport type AddToPeopleSpeciesPayload = {\n   __typename?: 'AddToPeopleSpeciesPayload',\n  peoplePerson?: Maybe<Person>,\n  speciesSpecies?: Maybe<Species>,\n};\n\nexport type AddToPeopleStarshipsPayload = {\n   __typename?: 'AddToPeopleStarshipsPayload',\n  pilotsPerson?: Maybe<Person>,\n  starshipsStarship?: Maybe<Starship>,\n};\n\nexport type AddToPeopleVehiclesPayload = {\n   __typename?: 'AddToPeopleVehiclesPayload',\n  pilotsPerson?: Maybe<Person>,\n  vehiclesVehicle?: Maybe<Vehicle>,\n};\n\nexport type Asset = Node & {\n   __typename?: 'Asset',\n  createdAt: Scalars['DateTime'],\n  fileName: Scalars['String'],\n  handle: Scalars['String'],\n  height?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  mimeType?: Maybe<Scalars['String']>,\n  size: Scalars['Float'],\n  updatedAt: Scalars['DateTime'],\n  url: Scalars['String'],\n  width?: Maybe<Scalars['Float']>,\n};\n\nexport type AssetFilter = {\n  AND?: Maybe<Array<AssetFilter>>,\n  OR?: Maybe<Array<AssetFilter>>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  fileName?: Maybe<Scalars['String']>,\n  fileName_not?: Maybe<Scalars['String']>,\n  fileName_in?: Maybe<Array<Scalars['String']>>,\n  fileName_not_in?: Maybe<Array<Scalars['String']>>,\n  fileName_lt?: Maybe<Scalars['String']>,\n  fileName_lte?: Maybe<Scalars['String']>,\n  fileName_gt?: Maybe<Scalars['String']>,\n  fileName_gte?: Maybe<Scalars['String']>,\n  fileName_contains?: Maybe<Scalars['String']>,\n  fileName_not_contains?: Maybe<Scalars['String']>,\n  fileName_starts_with?: Maybe<Scalars['String']>,\n  fileName_not_starts_with?: Maybe<Scalars['String']>,\n  fileName_ends_with?: Maybe<Scalars['String']>,\n  fileName_not_ends_with?: Maybe<Scalars['String']>,\n  handle?: Maybe<Scalars['String']>,\n  handle_not?: Maybe<Scalars['String']>,\n  handle_in?: Maybe<Array<Scalars['String']>>,\n  handle_not_in?: Maybe<Array<Scalars['String']>>,\n  handle_lt?: Maybe<Scalars['String']>,\n  handle_lte?: Maybe<Scalars['String']>,\n  handle_gt?: Maybe<Scalars['String']>,\n  handle_gte?: Maybe<Scalars['String']>,\n  handle_contains?: Maybe<Scalars['String']>,\n  handle_not_contains?: Maybe<Scalars['String']>,\n  handle_starts_with?: Maybe<Scalars['String']>,\n  handle_not_starts_with?: Maybe<Scalars['String']>,\n  handle_ends_with?: Maybe<Scalars['String']>,\n  handle_not_ends_with?: Maybe<Scalars['String']>,\n  height?: Maybe<Scalars['Float']>,\n  height_not?: Maybe<Scalars['Float']>,\n  height_in?: Maybe<Array<Scalars['Float']>>,\n  height_not_in?: Maybe<Array<Scalars['Float']>>,\n  height_lt?: Maybe<Scalars['Float']>,\n  height_lte?: Maybe<Scalars['Float']>,\n  height_gt?: Maybe<Scalars['Float']>,\n  height_gte?: Maybe<Scalars['Float']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  mimeType?: Maybe<Scalars['String']>,\n  mimeType_not?: Maybe<Scalars['String']>,\n  mimeType_in?: Maybe<Array<Scalars['String']>>,\n  mimeType_not_in?: Maybe<Array<Scalars['String']>>,\n  mimeType_lt?: Maybe<Scalars['String']>,\n  mimeType_lte?: Maybe<Scalars['String']>,\n  mimeType_gt?: Maybe<Scalars['String']>,\n  mimeType_gte?: Maybe<Scalars['String']>,\n  mimeType_contains?: Maybe<Scalars['String']>,\n  mimeType_not_contains?: Maybe<Scalars['String']>,\n  mimeType_starts_with?: Maybe<Scalars['String']>,\n  mimeType_not_starts_with?: Maybe<Scalars['String']>,\n  mimeType_ends_with?: Maybe<Scalars['String']>,\n  mimeType_not_ends_with?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['Float']>,\n  size_not?: Maybe<Scalars['Float']>,\n  size_in?: Maybe<Array<Scalars['Float']>>,\n  size_not_in?: Maybe<Array<Scalars['Float']>>,\n  size_lt?: Maybe<Scalars['Float']>,\n  size_lte?: Maybe<Scalars['Float']>,\n  size_gt?: Maybe<Scalars['Float']>,\n  size_gte?: Maybe<Scalars['Float']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  url?: Maybe<Scalars['String']>,\n  url_not?: Maybe<Scalars['String']>,\n  url_in?: Maybe<Array<Scalars['String']>>,\n  url_not_in?: Maybe<Array<Scalars['String']>>,\n  url_lt?: Maybe<Scalars['String']>,\n  url_lte?: Maybe<Scalars['String']>,\n  url_gt?: Maybe<Scalars['String']>,\n  url_gte?: Maybe<Scalars['String']>,\n  url_contains?: Maybe<Scalars['String']>,\n  url_not_contains?: Maybe<Scalars['String']>,\n  url_starts_with?: Maybe<Scalars['String']>,\n  url_not_starts_with?: Maybe<Scalars['String']>,\n  url_ends_with?: Maybe<Scalars['String']>,\n  url_not_ends_with?: Maybe<Scalars['String']>,\n  width?: Maybe<Scalars['Float']>,\n  width_not?: Maybe<Scalars['Float']>,\n  width_in?: Maybe<Array<Scalars['Float']>>,\n  width_not_in?: Maybe<Array<Scalars['Float']>>,\n  width_lt?: Maybe<Scalars['Float']>,\n  width_lte?: Maybe<Scalars['Float']>,\n  width_gt?: Maybe<Scalars['Float']>,\n  width_gte?: Maybe<Scalars['Float']>,\n};\n\nexport enum AssetOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  FileNameAsc = 'fileName_ASC',\n  FileNameDesc = 'fileName_DESC',\n  HandleAsc = 'handle_ASC',\n  HandleDesc = 'handle_DESC',\n  HeightAsc = 'height_ASC',\n  HeightDesc = 'height_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  MimeTypeAsc = 'mimeType_ASC',\n  MimeTypeDesc = 'mimeType_DESC',\n  SizeAsc = 'size_ASC',\n  SizeDesc = 'size_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC',\n  UrlAsc = 'url_ASC',\n  UrlDesc = 'url_DESC',\n  WidthAsc = 'width_ASC',\n  WidthDesc = 'width_DESC'\n}\n\nexport type AssetPreviousValues = {\n   __typename?: 'AssetPreviousValues',\n  createdAt: Scalars['DateTime'],\n  fileName: Scalars['String'],\n  handle: Scalars['String'],\n  height?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  mimeType?: Maybe<Scalars['String']>,\n  size: Scalars['Float'],\n  updatedAt: Scalars['DateTime'],\n  url: Scalars['String'],\n  width?: Maybe<Scalars['Float']>,\n};\n\nexport type AssetSubscriptionFilter = {\n  AND?: Maybe<Array<AssetSubscriptionFilter>>,\n  OR?: Maybe<Array<AssetSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<AssetSubscriptionFilterNode>,\n};\n\nexport type AssetSubscriptionFilterNode = {\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  fileName?: Maybe<Scalars['String']>,\n  fileName_not?: Maybe<Scalars['String']>,\n  fileName_in?: Maybe<Array<Scalars['String']>>,\n  fileName_not_in?: Maybe<Array<Scalars['String']>>,\n  fileName_lt?: Maybe<Scalars['String']>,\n  fileName_lte?: Maybe<Scalars['String']>,\n  fileName_gt?: Maybe<Scalars['String']>,\n  fileName_gte?: Maybe<Scalars['String']>,\n  fileName_contains?: Maybe<Scalars['String']>,\n  fileName_not_contains?: Maybe<Scalars['String']>,\n  fileName_starts_with?: Maybe<Scalars['String']>,\n  fileName_not_starts_with?: Maybe<Scalars['String']>,\n  fileName_ends_with?: Maybe<Scalars['String']>,\n  fileName_not_ends_with?: Maybe<Scalars['String']>,\n  handle?: Maybe<Scalars['String']>,\n  handle_not?: Maybe<Scalars['String']>,\n  handle_in?: Maybe<Array<Scalars['String']>>,\n  handle_not_in?: Maybe<Array<Scalars['String']>>,\n  handle_lt?: Maybe<Scalars['String']>,\n  handle_lte?: Maybe<Scalars['String']>,\n  handle_gt?: Maybe<Scalars['String']>,\n  handle_gte?: Maybe<Scalars['String']>,\n  handle_contains?: Maybe<Scalars['String']>,\n  handle_not_contains?: Maybe<Scalars['String']>,\n  handle_starts_with?: Maybe<Scalars['String']>,\n  handle_not_starts_with?: Maybe<Scalars['String']>,\n  handle_ends_with?: Maybe<Scalars['String']>,\n  handle_not_ends_with?: Maybe<Scalars['String']>,\n  height?: Maybe<Scalars['Float']>,\n  height_not?: Maybe<Scalars['Float']>,\n  height_in?: Maybe<Array<Scalars['Float']>>,\n  height_not_in?: Maybe<Array<Scalars['Float']>>,\n  height_lt?: Maybe<Scalars['Float']>,\n  height_lte?: Maybe<Scalars['Float']>,\n  height_gt?: Maybe<Scalars['Float']>,\n  height_gte?: Maybe<Scalars['Float']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  mimeType?: Maybe<Scalars['String']>,\n  mimeType_not?: Maybe<Scalars['String']>,\n  mimeType_in?: Maybe<Array<Scalars['String']>>,\n  mimeType_not_in?: Maybe<Array<Scalars['String']>>,\n  mimeType_lt?: Maybe<Scalars['String']>,\n  mimeType_lte?: Maybe<Scalars['String']>,\n  mimeType_gt?: Maybe<Scalars['String']>,\n  mimeType_gte?: Maybe<Scalars['String']>,\n  mimeType_contains?: Maybe<Scalars['String']>,\n  mimeType_not_contains?: Maybe<Scalars['String']>,\n  mimeType_starts_with?: Maybe<Scalars['String']>,\n  mimeType_not_starts_with?: Maybe<Scalars['String']>,\n  mimeType_ends_with?: Maybe<Scalars['String']>,\n  mimeType_not_ends_with?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['Float']>,\n  size_not?: Maybe<Scalars['Float']>,\n  size_in?: Maybe<Array<Scalars['Float']>>,\n  size_not_in?: Maybe<Array<Scalars['Float']>>,\n  size_lt?: Maybe<Scalars['Float']>,\n  size_lte?: Maybe<Scalars['Float']>,\n  size_gt?: Maybe<Scalars['Float']>,\n  size_gte?: Maybe<Scalars['Float']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  url?: Maybe<Scalars['String']>,\n  url_not?: Maybe<Scalars['String']>,\n  url_in?: Maybe<Array<Scalars['String']>>,\n  url_not_in?: Maybe<Array<Scalars['String']>>,\n  url_lt?: Maybe<Scalars['String']>,\n  url_lte?: Maybe<Scalars['String']>,\n  url_gt?: Maybe<Scalars['String']>,\n  url_gte?: Maybe<Scalars['String']>,\n  url_contains?: Maybe<Scalars['String']>,\n  url_not_contains?: Maybe<Scalars['String']>,\n  url_starts_with?: Maybe<Scalars['String']>,\n  url_not_starts_with?: Maybe<Scalars['String']>,\n  url_ends_with?: Maybe<Scalars['String']>,\n  url_not_ends_with?: Maybe<Scalars['String']>,\n  width?: Maybe<Scalars['Float']>,\n  width_not?: Maybe<Scalars['Float']>,\n  width_in?: Maybe<Array<Scalars['Float']>>,\n  width_not_in?: Maybe<Array<Scalars['Float']>>,\n  width_lt?: Maybe<Scalars['Float']>,\n  width_lte?: Maybe<Scalars['Float']>,\n  width_gt?: Maybe<Scalars['Float']>,\n  width_gte?: Maybe<Scalars['Float']>,\n};\n\nexport type AssetSubscriptionPayload = {\n   __typename?: 'AssetSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Asset>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<AssetPreviousValues>,\n};\n\nexport type CreateAsset = {\n  fileName: Scalars['String'],\n  handle: Scalars['String'],\n  height?: Maybe<Scalars['Float']>,\n  mimeType?: Maybe<Scalars['String']>,\n  size: Scalars['Float'],\n  url: Scalars['String'],\n  width?: Maybe<Scalars['Float']>,\n};\n\nexport type CreateFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type CreatePerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type CreatePlanet = {\n  climate?: Maybe<Array<Scalars['String']>>,\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  name: Scalars['String'],\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PlanetfilmsFilm>>,\n  residentsIds?: Maybe<Array<Scalars['ID']>>,\n  residents?: Maybe<Array<PlanetresidentsPerson>>,\n};\n\nexport type CreateSpecies = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<SpeciesfilmsFilm>>,\n  peopleIds?: Maybe<Array<Scalars['ID']>>,\n  people?: Maybe<Array<SpeciespeoplePerson>>,\n};\n\nexport type CreateStarship = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<StarshipfilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<StarshippilotsPerson>>,\n};\n\nexport type CreateVehicle = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  crew?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<VehiclefilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<VehiclepilotsPerson>>,\n};\n\n\nexport type Film = Node & {\n   __typename?: 'Film',\n  characters?: Maybe<Array<Person>>,\n  createdAt: Scalars['DateTime'],\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  openingCrawl?: Maybe<Scalars['String']>,\n  planets?: Maybe<Array<Planet>>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  species?: Maybe<Array<Species>>,\n  starships?: Maybe<Array<Starship>>,\n  title: Scalars['String'],\n  updatedAt: Scalars['DateTime'],\n  vehicles?: Maybe<Array<Vehicle>>,\n  _charactersMeta: _QueryMeta,\n  _planetsMeta: _QueryMeta,\n  _speciesMeta: _QueryMeta,\n  _starshipsMeta: _QueryMeta,\n  _vehiclesMeta: _QueryMeta,\n};\n\n\nexport type FilmCharactersArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type FilmPlanetsArgs = {\n  filter?: Maybe<PlanetFilter>,\n  orderBy?: Maybe<PlanetOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type FilmSpeciesArgs = {\n  filter?: Maybe<SpeciesFilter>,\n  orderBy?: Maybe<SpeciesOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type FilmStarshipsArgs = {\n  filter?: Maybe<StarshipFilter>,\n  orderBy?: Maybe<StarshipOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type FilmVehiclesArgs = {\n  filter?: Maybe<VehicleFilter>,\n  orderBy?: Maybe<VehicleOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Film_CharactersMetaArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Film_PlanetsMetaArgs = {\n  filter?: Maybe<PlanetFilter>,\n  orderBy?: Maybe<PlanetOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Film_SpeciesMetaArgs = {\n  filter?: Maybe<SpeciesFilter>,\n  orderBy?: Maybe<SpeciesOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Film_StarshipsMetaArgs = {\n  filter?: Maybe<StarshipFilter>,\n  orderBy?: Maybe<StarshipOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Film_VehiclesMetaArgs = {\n  filter?: Maybe<VehicleFilter>,\n  orderBy?: Maybe<VehicleOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type FilmcharactersPerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type FilmFilter = {\n  AND?: Maybe<Array<FilmFilter>>,\n  OR?: Maybe<Array<FilmFilter>>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  director?: Maybe<Scalars['String']>,\n  director_not?: Maybe<Scalars['String']>,\n  director_in?: Maybe<Array<Scalars['String']>>,\n  director_not_in?: Maybe<Array<Scalars['String']>>,\n  director_lt?: Maybe<Scalars['String']>,\n  director_lte?: Maybe<Scalars['String']>,\n  director_gt?: Maybe<Scalars['String']>,\n  director_gte?: Maybe<Scalars['String']>,\n  director_contains?: Maybe<Scalars['String']>,\n  director_not_contains?: Maybe<Scalars['String']>,\n  director_starts_with?: Maybe<Scalars['String']>,\n  director_not_starts_with?: Maybe<Scalars['String']>,\n  director_ends_with?: Maybe<Scalars['String']>,\n  director_not_ends_with?: Maybe<Scalars['String']>,\n  episodeId?: Maybe<Scalars['Int']>,\n  episodeId_not?: Maybe<Scalars['Int']>,\n  episodeId_in?: Maybe<Array<Scalars['Int']>>,\n  episodeId_not_in?: Maybe<Array<Scalars['Int']>>,\n  episodeId_lt?: Maybe<Scalars['Int']>,\n  episodeId_lte?: Maybe<Scalars['Int']>,\n  episodeId_gt?: Maybe<Scalars['Int']>,\n  episodeId_gte?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  openingCrawl_not?: Maybe<Scalars['String']>,\n  openingCrawl_in?: Maybe<Array<Scalars['String']>>,\n  openingCrawl_not_in?: Maybe<Array<Scalars['String']>>,\n  openingCrawl_lt?: Maybe<Scalars['String']>,\n  openingCrawl_lte?: Maybe<Scalars['String']>,\n  openingCrawl_gt?: Maybe<Scalars['String']>,\n  openingCrawl_gte?: Maybe<Scalars['String']>,\n  openingCrawl_contains?: Maybe<Scalars['String']>,\n  openingCrawl_not_contains?: Maybe<Scalars['String']>,\n  openingCrawl_starts_with?: Maybe<Scalars['String']>,\n  openingCrawl_not_starts_with?: Maybe<Scalars['String']>,\n  openingCrawl_ends_with?: Maybe<Scalars['String']>,\n  openingCrawl_not_ends_with?: Maybe<Scalars['String']>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  releaseDate_not?: Maybe<Scalars['DateTime']>,\n  releaseDate_in?: Maybe<Array<Scalars['DateTime']>>,\n  releaseDate_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  releaseDate_lt?: Maybe<Scalars['DateTime']>,\n  releaseDate_lte?: Maybe<Scalars['DateTime']>,\n  releaseDate_gt?: Maybe<Scalars['DateTime']>,\n  releaseDate_gte?: Maybe<Scalars['DateTime']>,\n  title?: Maybe<Scalars['String']>,\n  title_not?: Maybe<Scalars['String']>,\n  title_in?: Maybe<Array<Scalars['String']>>,\n  title_not_in?: Maybe<Array<Scalars['String']>>,\n  title_lt?: Maybe<Scalars['String']>,\n  title_lte?: Maybe<Scalars['String']>,\n  title_gt?: Maybe<Scalars['String']>,\n  title_gte?: Maybe<Scalars['String']>,\n  title_contains?: Maybe<Scalars['String']>,\n  title_not_contains?: Maybe<Scalars['String']>,\n  title_starts_with?: Maybe<Scalars['String']>,\n  title_not_starts_with?: Maybe<Scalars['String']>,\n  title_ends_with?: Maybe<Scalars['String']>,\n  title_not_ends_with?: Maybe<Scalars['String']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  characters_every?: Maybe<PersonFilter>,\n  characters_some?: Maybe<PersonFilter>,\n  characters_none?: Maybe<PersonFilter>,\n  planets_every?: Maybe<PlanetFilter>,\n  planets_some?: Maybe<PlanetFilter>,\n  planets_none?: Maybe<PlanetFilter>,\n  species_every?: Maybe<SpeciesFilter>,\n  species_some?: Maybe<SpeciesFilter>,\n  species_none?: Maybe<SpeciesFilter>,\n  starships_every?: Maybe<StarshipFilter>,\n  starships_some?: Maybe<StarshipFilter>,\n  starships_none?: Maybe<StarshipFilter>,\n  vehicles_every?: Maybe<VehicleFilter>,\n  vehicles_some?: Maybe<VehicleFilter>,\n  vehicles_none?: Maybe<VehicleFilter>,\n};\n\nexport enum FilmOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  DirectorAsc = 'director_ASC',\n  DirectorDesc = 'director_DESC',\n  EpisodeIdAsc = 'episodeId_ASC',\n  EpisodeIdDesc = 'episodeId_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  OpeningCrawlAsc = 'openingCrawl_ASC',\n  OpeningCrawlDesc = 'openingCrawl_DESC',\n  ReleaseDateAsc = 'releaseDate_ASC',\n  ReleaseDateDesc = 'releaseDate_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type FilmplanetsPlanet = {\n  climate?: Maybe<Array<Scalars['String']>>,\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  name: Scalars['String'],\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PlanetfilmsFilm>>,\n  residentsIds?: Maybe<Array<Scalars['ID']>>,\n  residents?: Maybe<Array<PlanetresidentsPerson>>,\n};\n\nexport type FilmPreviousValues = {\n   __typename?: 'FilmPreviousValues',\n  createdAt: Scalars['DateTime'],\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type FilmspeciesSpecies = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<SpeciesfilmsFilm>>,\n  peopleIds?: Maybe<Array<Scalars['ID']>>,\n  people?: Maybe<Array<SpeciespeoplePerson>>,\n};\n\nexport type FilmstarshipsStarship = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<StarshipfilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<StarshippilotsPerson>>,\n};\n\nexport type FilmSubscriptionFilter = {\n  AND?: Maybe<Array<FilmSubscriptionFilter>>,\n  OR?: Maybe<Array<FilmSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<FilmSubscriptionFilterNode>,\n};\n\nexport type FilmSubscriptionFilterNode = {\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  director?: Maybe<Scalars['String']>,\n  director_not?: Maybe<Scalars['String']>,\n  director_in?: Maybe<Array<Scalars['String']>>,\n  director_not_in?: Maybe<Array<Scalars['String']>>,\n  director_lt?: Maybe<Scalars['String']>,\n  director_lte?: Maybe<Scalars['String']>,\n  director_gt?: Maybe<Scalars['String']>,\n  director_gte?: Maybe<Scalars['String']>,\n  director_contains?: Maybe<Scalars['String']>,\n  director_not_contains?: Maybe<Scalars['String']>,\n  director_starts_with?: Maybe<Scalars['String']>,\n  director_not_starts_with?: Maybe<Scalars['String']>,\n  director_ends_with?: Maybe<Scalars['String']>,\n  director_not_ends_with?: Maybe<Scalars['String']>,\n  episodeId?: Maybe<Scalars['Int']>,\n  episodeId_not?: Maybe<Scalars['Int']>,\n  episodeId_in?: Maybe<Array<Scalars['Int']>>,\n  episodeId_not_in?: Maybe<Array<Scalars['Int']>>,\n  episodeId_lt?: Maybe<Scalars['Int']>,\n  episodeId_lte?: Maybe<Scalars['Int']>,\n  episodeId_gt?: Maybe<Scalars['Int']>,\n  episodeId_gte?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  openingCrawl_not?: Maybe<Scalars['String']>,\n  openingCrawl_in?: Maybe<Array<Scalars['String']>>,\n  openingCrawl_not_in?: Maybe<Array<Scalars['String']>>,\n  openingCrawl_lt?: Maybe<Scalars['String']>,\n  openingCrawl_lte?: Maybe<Scalars['String']>,\n  openingCrawl_gt?: Maybe<Scalars['String']>,\n  openingCrawl_gte?: Maybe<Scalars['String']>,\n  openingCrawl_contains?: Maybe<Scalars['String']>,\n  openingCrawl_not_contains?: Maybe<Scalars['String']>,\n  openingCrawl_starts_with?: Maybe<Scalars['String']>,\n  openingCrawl_not_starts_with?: Maybe<Scalars['String']>,\n  openingCrawl_ends_with?: Maybe<Scalars['String']>,\n  openingCrawl_not_ends_with?: Maybe<Scalars['String']>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  releaseDate_not?: Maybe<Scalars['DateTime']>,\n  releaseDate_in?: Maybe<Array<Scalars['DateTime']>>,\n  releaseDate_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  releaseDate_lt?: Maybe<Scalars['DateTime']>,\n  releaseDate_lte?: Maybe<Scalars['DateTime']>,\n  releaseDate_gt?: Maybe<Scalars['DateTime']>,\n  releaseDate_gte?: Maybe<Scalars['DateTime']>,\n  title?: Maybe<Scalars['String']>,\n  title_not?: Maybe<Scalars['String']>,\n  title_in?: Maybe<Array<Scalars['String']>>,\n  title_not_in?: Maybe<Array<Scalars['String']>>,\n  title_lt?: Maybe<Scalars['String']>,\n  title_lte?: Maybe<Scalars['String']>,\n  title_gt?: Maybe<Scalars['String']>,\n  title_gte?: Maybe<Scalars['String']>,\n  title_contains?: Maybe<Scalars['String']>,\n  title_not_contains?: Maybe<Scalars['String']>,\n  title_starts_with?: Maybe<Scalars['String']>,\n  title_not_starts_with?: Maybe<Scalars['String']>,\n  title_ends_with?: Maybe<Scalars['String']>,\n  title_not_ends_with?: Maybe<Scalars['String']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  characters_every?: Maybe<PersonFilter>,\n  characters_some?: Maybe<PersonFilter>,\n  characters_none?: Maybe<PersonFilter>,\n  planets_every?: Maybe<PlanetFilter>,\n  planets_some?: Maybe<PlanetFilter>,\n  planets_none?: Maybe<PlanetFilter>,\n  species_every?: Maybe<SpeciesFilter>,\n  species_some?: Maybe<SpeciesFilter>,\n  species_none?: Maybe<SpeciesFilter>,\n  starships_every?: Maybe<StarshipFilter>,\n  starships_some?: Maybe<StarshipFilter>,\n  starships_none?: Maybe<StarshipFilter>,\n  vehicles_every?: Maybe<VehicleFilter>,\n  vehicles_some?: Maybe<VehicleFilter>,\n  vehicles_none?: Maybe<VehicleFilter>,\n};\n\nexport type FilmSubscriptionPayload = {\n   __typename?: 'FilmSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Film>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<FilmPreviousValues>,\n};\n\nexport type FilmvehiclesVehicle = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  crew?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<VehiclefilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<VehiclepilotsPerson>>,\n};\n\nexport type InvokeFunctionInput = {\n  name: Scalars['String'],\n  input: Scalars['String'],\n  clientMutationId?: Maybe<Scalars['String']>,\n};\n\nexport type InvokeFunctionPayload = {\n   __typename?: 'InvokeFunctionPayload',\n  result: Scalars['String'],\n  clientMutationId?: Maybe<Scalars['String']>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  createAsset?: Maybe<Asset>,\n  createFilm?: Maybe<Film>,\n  createPerson?: Maybe<Person>,\n  createPlanet?: Maybe<Planet>,\n  createSpecies?: Maybe<Species>,\n  createStarship?: Maybe<Starship>,\n  createVehicle?: Maybe<Vehicle>,\n  updateAsset?: Maybe<Asset>,\n  updateFilm?: Maybe<Film>,\n  updatePerson?: Maybe<Person>,\n  updatePlanet?: Maybe<Planet>,\n  updateSpecies?: Maybe<Species>,\n  updateStarship?: Maybe<Starship>,\n  updateVehicle?: Maybe<Vehicle>,\n  updateOrCreateAsset?: Maybe<Asset>,\n  updateOrCreateFilm?: Maybe<Film>,\n  updateOrCreatePerson?: Maybe<Person>,\n  updateOrCreatePlanet?: Maybe<Planet>,\n  updateOrCreateSpecies?: Maybe<Species>,\n  updateOrCreateStarship?: Maybe<Starship>,\n  updateOrCreateVehicle?: Maybe<Vehicle>,\n  deleteAsset?: Maybe<Asset>,\n  deleteFilm?: Maybe<Film>,\n  deletePerson?: Maybe<Person>,\n  deletePlanet?: Maybe<Planet>,\n  deleteSpecies?: Maybe<Species>,\n  deleteStarship?: Maybe<Starship>,\n  deleteVehicle?: Maybe<Vehicle>,\n  addToFilmPlanets?: Maybe<AddToFilmPlanetsPayload>,\n  addToFilmSpecies?: Maybe<AddToFilmSpeciesPayload>,\n  addToFilmStarships?: Maybe<AddToFilmStarshipsPayload>,\n  addToFilmVehicles?: Maybe<AddToFilmVehiclesPayload>,\n  addToPeopleFilm?: Maybe<AddToPeopleFilmPayload>,\n  addToPeoplePlanet?: Maybe<AddToPeoplePlanetPayload>,\n  addToPeopleSpecies?: Maybe<AddToPeopleSpeciesPayload>,\n  addToPeopleStarships?: Maybe<AddToPeopleStarshipsPayload>,\n  addToPeopleVehicles?: Maybe<AddToPeopleVehiclesPayload>,\n  removeFromFilmPlanets?: Maybe<RemoveFromFilmPlanetsPayload>,\n  removeFromFilmSpecies?: Maybe<RemoveFromFilmSpeciesPayload>,\n  removeFromFilmStarships?: Maybe<RemoveFromFilmStarshipsPayload>,\n  removeFromFilmVehicles?: Maybe<RemoveFromFilmVehiclesPayload>,\n  removeFromPeopleFilm?: Maybe<RemoveFromPeopleFilmPayload>,\n  removeFromPeoplePlanet?: Maybe<RemoveFromPeoplePlanetPayload>,\n  removeFromPeopleSpecies?: Maybe<RemoveFromPeopleSpeciesPayload>,\n  removeFromPeopleStarships?: Maybe<RemoveFromPeopleStarshipsPayload>,\n  removeFromPeopleVehicles?: Maybe<RemoveFromPeopleVehiclesPayload>,\n  invokeFunction?: Maybe<InvokeFunctionPayload>,\n};\n\n\nexport type MutationCreateAssetArgs = {\n  fileName: Scalars['String'],\n  handle: Scalars['String'],\n  height?: Maybe<Scalars['Float']>,\n  mimeType?: Maybe<Scalars['String']>,\n  size: Scalars['Float'],\n  url: Scalars['String'],\n  width?: Maybe<Scalars['Float']>\n};\n\n\nexport type MutationCreateFilmArgs = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>\n};\n\n\nexport type MutationCreatePersonArgs = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>\n};\n\n\nexport type MutationCreatePlanetArgs = {\n  climate?: Maybe<Array<Scalars['String']>>,\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  name: Scalars['String'],\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PlanetfilmsFilm>>,\n  residentsIds?: Maybe<Array<Scalars['ID']>>,\n  residents?: Maybe<Array<PlanetresidentsPerson>>\n};\n\n\nexport type MutationCreateSpeciesArgs = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<SpeciesfilmsFilm>>,\n  peopleIds?: Maybe<Array<Scalars['ID']>>,\n  people?: Maybe<Array<SpeciespeoplePerson>>\n};\n\n\nexport type MutationCreateStarshipArgs = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<StarshipfilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<StarshippilotsPerson>>\n};\n\n\nexport type MutationCreateVehicleArgs = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  crew?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<VehiclefilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<VehiclepilotsPerson>>\n};\n\n\nexport type MutationUpdateAssetArgs = {\n  fileName?: Maybe<Scalars['String']>,\n  handle?: Maybe<Scalars['String']>,\n  height?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  mimeType?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['Float']>,\n  url?: Maybe<Scalars['String']>,\n  width?: Maybe<Scalars['Float']>\n};\n\n\nexport type MutationUpdateFilmArgs = {\n  director?: Maybe<Scalars['String']>,\n  episodeId?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title?: Maybe<Scalars['String']>,\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>\n};\n\n\nexport type MutationUpdatePersonArgs = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name?: Maybe<Scalars['String']>,\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>\n};\n\n\nexport type MutationUpdatePlanetArgs = {\n  climate?: Maybe<Array<Scalars['String']>>,\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  name?: Maybe<Scalars['String']>,\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PlanetfilmsFilm>>,\n  residentsIds?: Maybe<Array<Scalars['ID']>>,\n  residents?: Maybe<Array<PlanetresidentsPerson>>\n};\n\n\nexport type MutationUpdateSpeciesArgs = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<SpeciesfilmsFilm>>,\n  peopleIds?: Maybe<Array<Scalars['ID']>>,\n  people?: Maybe<Array<SpeciespeoplePerson>>\n};\n\n\nexport type MutationUpdateStarshipArgs = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<StarshipfilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<StarshippilotsPerson>>\n};\n\n\nexport type MutationUpdateVehicleArgs = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  crew?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<VehiclefilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<VehiclepilotsPerson>>\n};\n\n\nexport type MutationUpdateOrCreateAssetArgs = {\n  update: UpdateAsset,\n  create: CreateAsset\n};\n\n\nexport type MutationUpdateOrCreateFilmArgs = {\n  update: UpdateFilm,\n  create: CreateFilm\n};\n\n\nexport type MutationUpdateOrCreatePersonArgs = {\n  update: UpdatePerson,\n  create: CreatePerson\n};\n\n\nexport type MutationUpdateOrCreatePlanetArgs = {\n  update: UpdatePlanet,\n  create: CreatePlanet\n};\n\n\nexport type MutationUpdateOrCreateSpeciesArgs = {\n  update: UpdateSpecies,\n  create: CreateSpecies\n};\n\n\nexport type MutationUpdateOrCreateStarshipArgs = {\n  update: UpdateStarship,\n  create: CreateStarship\n};\n\n\nexport type MutationUpdateOrCreateVehicleArgs = {\n  update: UpdateVehicle,\n  create: CreateVehicle\n};\n\n\nexport type MutationDeleteAssetArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationDeleteFilmArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationDeletePersonArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationDeletePlanetArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationDeleteSpeciesArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationDeleteStarshipArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationDeleteVehicleArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type MutationAddToFilmPlanetsArgs = {\n  planetsPlanetId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationAddToFilmSpeciesArgs = {\n  speciesSpeciesId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationAddToFilmStarshipsArgs = {\n  starshipsStarshipId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationAddToFilmVehiclesArgs = {\n  vehiclesVehicleId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationAddToPeopleFilmArgs = {\n  filmsFilmId: Scalars['ID'],\n  charactersPersonId: Scalars['ID']\n};\n\n\nexport type MutationAddToPeoplePlanetArgs = {\n  homeworldPlanetId: Scalars['ID'],\n  residentsPersonId: Scalars['ID']\n};\n\n\nexport type MutationAddToPeopleSpeciesArgs = {\n  speciesSpeciesId: Scalars['ID'],\n  peoplePersonId: Scalars['ID']\n};\n\n\nexport type MutationAddToPeopleStarshipsArgs = {\n  starshipsStarshipId: Scalars['ID'],\n  pilotsPersonId: Scalars['ID']\n};\n\n\nexport type MutationAddToPeopleVehiclesArgs = {\n  vehiclesVehicleId: Scalars['ID'],\n  pilotsPersonId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromFilmPlanetsArgs = {\n  planetsPlanetId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromFilmSpeciesArgs = {\n  speciesSpeciesId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromFilmStarshipsArgs = {\n  starshipsStarshipId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromFilmVehiclesArgs = {\n  vehiclesVehicleId: Scalars['ID'],\n  filmsFilmId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromPeopleFilmArgs = {\n  filmsFilmId: Scalars['ID'],\n  charactersPersonId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromPeoplePlanetArgs = {\n  homeworldPlanetId: Scalars['ID'],\n  residentsPersonId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromPeopleSpeciesArgs = {\n  speciesSpeciesId: Scalars['ID'],\n  peoplePersonId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromPeopleStarshipsArgs = {\n  starshipsStarshipId: Scalars['ID'],\n  pilotsPersonId: Scalars['ID']\n};\n\n\nexport type MutationRemoveFromPeopleVehiclesArgs = {\n  vehiclesVehicleId: Scalars['ID'],\n  pilotsPersonId: Scalars['ID']\n};\n\n\nexport type MutationInvokeFunctionArgs = {\n  input: InvokeFunctionInput\n};\n\nexport type Node = {\n  id: Scalars['ID'],\n};\n\nexport type Person = Node & {\n   __typename?: 'Person',\n  birthYear?: Maybe<Scalars['String']>,\n  createdAt: Scalars['DateTime'],\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  films?: Maybe<Array<Film>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  homeworld?: Maybe<Planet>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  species?: Maybe<Array<Species>>,\n  starships?: Maybe<Array<Starship>>,\n  updatedAt: Scalars['DateTime'],\n  vehicles?: Maybe<Array<Vehicle>>,\n  _filmsMeta: _QueryMeta,\n  _speciesMeta: _QueryMeta,\n  _starshipsMeta: _QueryMeta,\n  _vehiclesMeta: _QueryMeta,\n};\n\n\nexport type PersonFilmsArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type PersonHomeworldArgs = {\n  filter?: Maybe<PlanetFilter>\n};\n\n\nexport type PersonSpeciesArgs = {\n  filter?: Maybe<SpeciesFilter>,\n  orderBy?: Maybe<SpeciesOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type PersonStarshipsArgs = {\n  filter?: Maybe<StarshipFilter>,\n  orderBy?: Maybe<StarshipOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type PersonVehiclesArgs = {\n  filter?: Maybe<VehicleFilter>,\n  orderBy?: Maybe<VehicleOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Person_FilmsMetaArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Person_SpeciesMetaArgs = {\n  filter?: Maybe<SpeciesFilter>,\n  orderBy?: Maybe<SpeciesOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Person_StarshipsMetaArgs = {\n  filter?: Maybe<StarshipFilter>,\n  orderBy?: Maybe<StarshipOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Person_VehiclesMetaArgs = {\n  filter?: Maybe<VehicleFilter>,\n  orderBy?: Maybe<VehicleOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport enum Person_Eye_Color {\n  Unknown = 'UNKNOWN',\n  Blue = 'BLUE',\n  Yellow = 'YELLOW',\n  Red = 'RED',\n  Brown = 'BROWN',\n  Bluegrey = 'BLUEGREY',\n  Black = 'BLACK',\n  Orange = 'ORANGE',\n  Hazel = 'HAZEL',\n  Pink = 'PINK',\n  Gold = 'GOLD',\n  Green = 'GREEN',\n  White = 'WHITE',\n  Dark = 'DARK'\n}\n\nexport enum Person_Gender {\n  Unknown = 'UNKNOWN',\n  Male = 'MALE',\n  Female = 'FEMALE',\n  Hermaphrodite = 'HERMAPHRODITE'\n}\n\nexport enum Person_Hair_Color {\n  Auburn = 'AUBURN',\n  Black = 'BLACK',\n  Blonde = 'BLONDE',\n  Brown = 'BROWN',\n  Grey = 'GREY',\n  Unknown = 'UNKNOWN',\n  White = 'WHITE'\n}\n\nexport enum Person_Skin_Color {\n  Unknown = 'UNKNOWN',\n  Fair = 'FAIR',\n  Gold = 'GOLD',\n  White = 'WHITE',\n  Light = 'LIGHT',\n  Green = 'GREEN',\n  Greentan = 'GREENTAN',\n  Pale = 'PALE',\n  Metal = 'METAL',\n  Dark = 'DARK',\n  Brownmottle = 'BROWNMOTTLE',\n  Brown = 'BROWN',\n  Grey = 'GREY',\n  Mottledgreen = 'MOTTLEDGREEN',\n  Orange = 'ORANGE',\n  Blue = 'BLUE',\n  Red = 'RED',\n  Yellow = 'YELLOW',\n  Tan = 'TAN',\n  Silver = 'SILVER'\n}\n\nexport type PersonfilmsFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type PersonFilter = {\n  AND?: Maybe<Array<PersonFilter>>,\n  OR?: Maybe<Array<PersonFilter>>,\n  birthYear?: Maybe<Scalars['String']>,\n  birthYear_not?: Maybe<Scalars['String']>,\n  birthYear_in?: Maybe<Array<Scalars['String']>>,\n  birthYear_not_in?: Maybe<Array<Scalars['String']>>,\n  birthYear_lt?: Maybe<Scalars['String']>,\n  birthYear_lte?: Maybe<Scalars['String']>,\n  birthYear_gt?: Maybe<Scalars['String']>,\n  birthYear_gte?: Maybe<Scalars['String']>,\n  birthYear_contains?: Maybe<Scalars['String']>,\n  birthYear_not_contains?: Maybe<Scalars['String']>,\n  birthYear_starts_with?: Maybe<Scalars['String']>,\n  birthYear_not_starts_with?: Maybe<Scalars['String']>,\n  birthYear_ends_with?: Maybe<Scalars['String']>,\n  birthYear_not_ends_with?: Maybe<Scalars['String']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  gender?: Maybe<Person_Gender>,\n  gender_not?: Maybe<Person_Gender>,\n  gender_in?: Maybe<Array<Person_Gender>>,\n  gender_not_in?: Maybe<Array<Person_Gender>>,\n  height?: Maybe<Scalars['Int']>,\n  height_not?: Maybe<Scalars['Int']>,\n  height_in?: Maybe<Array<Scalars['Int']>>,\n  height_not_in?: Maybe<Array<Scalars['Int']>>,\n  height_lt?: Maybe<Scalars['Int']>,\n  height_lte?: Maybe<Scalars['Int']>,\n  height_gt?: Maybe<Scalars['Int']>,\n  height_gte?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  mass_not?: Maybe<Scalars['Float']>,\n  mass_in?: Maybe<Array<Scalars['Float']>>,\n  mass_not_in?: Maybe<Array<Scalars['Float']>>,\n  mass_lt?: Maybe<Scalars['Float']>,\n  mass_lte?: Maybe<Scalars['Float']>,\n  mass_gt?: Maybe<Scalars['Float']>,\n  mass_gte?: Maybe<Scalars['Float']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  homeworld?: Maybe<PlanetFilter>,\n  species_every?: Maybe<SpeciesFilter>,\n  species_some?: Maybe<SpeciesFilter>,\n  species_none?: Maybe<SpeciesFilter>,\n  starships_every?: Maybe<StarshipFilter>,\n  starships_some?: Maybe<StarshipFilter>,\n  starships_none?: Maybe<StarshipFilter>,\n  vehicles_every?: Maybe<VehicleFilter>,\n  vehicles_some?: Maybe<VehicleFilter>,\n  vehicles_none?: Maybe<VehicleFilter>,\n};\n\nexport type PersonhomeworldPlanet = {\n  climate?: Maybe<Array<Scalars['String']>>,\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  name: Scalars['String'],\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PlanetfilmsFilm>>,\n  residentsIds?: Maybe<Array<Scalars['ID']>>,\n  residents?: Maybe<Array<PlanetresidentsPerson>>,\n};\n\nexport enum PersonOrderBy {\n  BirthYearAsc = 'birthYear_ASC',\n  BirthYearDesc = 'birthYear_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  GenderAsc = 'gender_ASC',\n  GenderDesc = 'gender_DESC',\n  HeightAsc = 'height_ASC',\n  HeightDesc = 'height_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  MassAsc = 'mass_ASC',\n  MassDesc = 'mass_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type PersonPreviousValues = {\n   __typename?: 'PersonPreviousValues',\n  birthYear?: Maybe<Scalars['String']>,\n  createdAt: Scalars['DateTime'],\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type PersonspeciesSpecies = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<SpeciesfilmsFilm>>,\n  peopleIds?: Maybe<Array<Scalars['ID']>>,\n  people?: Maybe<Array<SpeciespeoplePerson>>,\n};\n\nexport type PersonstarshipsStarship = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<StarshipfilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<StarshippilotsPerson>>,\n};\n\nexport type PersonSubscriptionFilter = {\n  AND?: Maybe<Array<PersonSubscriptionFilter>>,\n  OR?: Maybe<Array<PersonSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<PersonSubscriptionFilterNode>,\n};\n\nexport type PersonSubscriptionFilterNode = {\n  birthYear?: Maybe<Scalars['String']>,\n  birthYear_not?: Maybe<Scalars['String']>,\n  birthYear_in?: Maybe<Array<Scalars['String']>>,\n  birthYear_not_in?: Maybe<Array<Scalars['String']>>,\n  birthYear_lt?: Maybe<Scalars['String']>,\n  birthYear_lte?: Maybe<Scalars['String']>,\n  birthYear_gt?: Maybe<Scalars['String']>,\n  birthYear_gte?: Maybe<Scalars['String']>,\n  birthYear_contains?: Maybe<Scalars['String']>,\n  birthYear_not_contains?: Maybe<Scalars['String']>,\n  birthYear_starts_with?: Maybe<Scalars['String']>,\n  birthYear_not_starts_with?: Maybe<Scalars['String']>,\n  birthYear_ends_with?: Maybe<Scalars['String']>,\n  birthYear_not_ends_with?: Maybe<Scalars['String']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  gender?: Maybe<Person_Gender>,\n  gender_not?: Maybe<Person_Gender>,\n  gender_in?: Maybe<Array<Person_Gender>>,\n  gender_not_in?: Maybe<Array<Person_Gender>>,\n  height?: Maybe<Scalars['Int']>,\n  height_not?: Maybe<Scalars['Int']>,\n  height_in?: Maybe<Array<Scalars['Int']>>,\n  height_not_in?: Maybe<Array<Scalars['Int']>>,\n  height_lt?: Maybe<Scalars['Int']>,\n  height_lte?: Maybe<Scalars['Int']>,\n  height_gt?: Maybe<Scalars['Int']>,\n  height_gte?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  mass_not?: Maybe<Scalars['Float']>,\n  mass_in?: Maybe<Array<Scalars['Float']>>,\n  mass_not_in?: Maybe<Array<Scalars['Float']>>,\n  mass_lt?: Maybe<Scalars['Float']>,\n  mass_lte?: Maybe<Scalars['Float']>,\n  mass_gt?: Maybe<Scalars['Float']>,\n  mass_gte?: Maybe<Scalars['Float']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  homeworld?: Maybe<PlanetFilter>,\n  species_every?: Maybe<SpeciesFilter>,\n  species_some?: Maybe<SpeciesFilter>,\n  species_none?: Maybe<SpeciesFilter>,\n  starships_every?: Maybe<StarshipFilter>,\n  starships_some?: Maybe<StarshipFilter>,\n  starships_none?: Maybe<StarshipFilter>,\n  vehicles_every?: Maybe<VehicleFilter>,\n  vehicles_some?: Maybe<VehicleFilter>,\n  vehicles_none?: Maybe<VehicleFilter>,\n};\n\nexport type PersonSubscriptionPayload = {\n   __typename?: 'PersonSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Person>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<PersonPreviousValues>,\n};\n\nexport type PersonvehiclesVehicle = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  crew?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<VehiclefilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<VehiclepilotsPerson>>,\n};\n\nexport type Planet = Node & {\n   __typename?: 'Planet',\n  climate?: Maybe<Array<Scalars['String']>>,\n  createdAt: Scalars['DateTime'],\n  diameter?: Maybe<Scalars['Int']>,\n  films?: Maybe<Array<Film>>,\n  gravity?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  name: Scalars['String'],\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  residents?: Maybe<Array<Person>>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  updatedAt: Scalars['DateTime'],\n  _filmsMeta: _QueryMeta,\n  _residentsMeta: _QueryMeta,\n};\n\n\nexport type PlanetFilmsArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type PlanetResidentsArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Planet_FilmsMetaArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Planet_ResidentsMetaArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type PlanetfilmsFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type PlanetFilter = {\n  AND?: Maybe<Array<PlanetFilter>>,\n  OR?: Maybe<Array<PlanetFilter>>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  diameter?: Maybe<Scalars['Int']>,\n  diameter_not?: Maybe<Scalars['Int']>,\n  diameter_in?: Maybe<Array<Scalars['Int']>>,\n  diameter_not_in?: Maybe<Array<Scalars['Int']>>,\n  diameter_lt?: Maybe<Scalars['Int']>,\n  diameter_lte?: Maybe<Scalars['Int']>,\n  diameter_gt?: Maybe<Scalars['Int']>,\n  diameter_gte?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  gravity_not?: Maybe<Scalars['String']>,\n  gravity_in?: Maybe<Array<Scalars['String']>>,\n  gravity_not_in?: Maybe<Array<Scalars['String']>>,\n  gravity_lt?: Maybe<Scalars['String']>,\n  gravity_lte?: Maybe<Scalars['String']>,\n  gravity_gt?: Maybe<Scalars['String']>,\n  gravity_gte?: Maybe<Scalars['String']>,\n  gravity_contains?: Maybe<Scalars['String']>,\n  gravity_not_contains?: Maybe<Scalars['String']>,\n  gravity_starts_with?: Maybe<Scalars['String']>,\n  gravity_not_starts_with?: Maybe<Scalars['String']>,\n  gravity_ends_with?: Maybe<Scalars['String']>,\n  gravity_not_ends_with?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  orbitalPeriod_not?: Maybe<Scalars['Int']>,\n  orbitalPeriod_in?: Maybe<Array<Scalars['Int']>>,\n  orbitalPeriod_not_in?: Maybe<Array<Scalars['Int']>>,\n  orbitalPeriod_lt?: Maybe<Scalars['Int']>,\n  orbitalPeriod_lte?: Maybe<Scalars['Int']>,\n  orbitalPeriod_gt?: Maybe<Scalars['Int']>,\n  orbitalPeriod_gte?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  population_not?: Maybe<Scalars['Float']>,\n  population_in?: Maybe<Array<Scalars['Float']>>,\n  population_not_in?: Maybe<Array<Scalars['Float']>>,\n  population_lt?: Maybe<Scalars['Float']>,\n  population_lte?: Maybe<Scalars['Float']>,\n  population_gt?: Maybe<Scalars['Float']>,\n  population_gte?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  rotationPeriod_not?: Maybe<Scalars['Int']>,\n  rotationPeriod_in?: Maybe<Array<Scalars['Int']>>,\n  rotationPeriod_not_in?: Maybe<Array<Scalars['Int']>>,\n  rotationPeriod_lt?: Maybe<Scalars['Int']>,\n  rotationPeriod_lte?: Maybe<Scalars['Int']>,\n  rotationPeriod_gt?: Maybe<Scalars['Int']>,\n  rotationPeriod_gte?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  surfaceWater_not?: Maybe<Scalars['Float']>,\n  surfaceWater_in?: Maybe<Array<Scalars['Float']>>,\n  surfaceWater_not_in?: Maybe<Array<Scalars['Float']>>,\n  surfaceWater_lt?: Maybe<Scalars['Float']>,\n  surfaceWater_lte?: Maybe<Scalars['Float']>,\n  surfaceWater_gt?: Maybe<Scalars['Float']>,\n  surfaceWater_gte?: Maybe<Scalars['Float']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  residents_every?: Maybe<PersonFilter>,\n  residents_some?: Maybe<PersonFilter>,\n  residents_none?: Maybe<PersonFilter>,\n};\n\nexport enum PlanetOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  DiameterAsc = 'diameter_ASC',\n  DiameterDesc = 'diameter_DESC',\n  GravityAsc = 'gravity_ASC',\n  GravityDesc = 'gravity_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  OrbitalPeriodAsc = 'orbitalPeriod_ASC',\n  OrbitalPeriodDesc = 'orbitalPeriod_DESC',\n  PopulationAsc = 'population_ASC',\n  PopulationDesc = 'population_DESC',\n  RotationPeriodAsc = 'rotationPeriod_ASC',\n  RotationPeriodDesc = 'rotationPeriod_DESC',\n  SurfaceWaterAsc = 'surfaceWater_ASC',\n  SurfaceWaterDesc = 'surfaceWater_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type PlanetPreviousValues = {\n   __typename?: 'PlanetPreviousValues',\n  climate?: Maybe<Array<Scalars['String']>>,\n  createdAt: Scalars['DateTime'],\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  name: Scalars['String'],\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type PlanetresidentsPerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type PlanetSubscriptionFilter = {\n  AND?: Maybe<Array<PlanetSubscriptionFilter>>,\n  OR?: Maybe<Array<PlanetSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<PlanetSubscriptionFilterNode>,\n};\n\nexport type PlanetSubscriptionFilterNode = {\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  diameter?: Maybe<Scalars['Int']>,\n  diameter_not?: Maybe<Scalars['Int']>,\n  diameter_in?: Maybe<Array<Scalars['Int']>>,\n  diameter_not_in?: Maybe<Array<Scalars['Int']>>,\n  diameter_lt?: Maybe<Scalars['Int']>,\n  diameter_lte?: Maybe<Scalars['Int']>,\n  diameter_gt?: Maybe<Scalars['Int']>,\n  diameter_gte?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  gravity_not?: Maybe<Scalars['String']>,\n  gravity_in?: Maybe<Array<Scalars['String']>>,\n  gravity_not_in?: Maybe<Array<Scalars['String']>>,\n  gravity_lt?: Maybe<Scalars['String']>,\n  gravity_lte?: Maybe<Scalars['String']>,\n  gravity_gt?: Maybe<Scalars['String']>,\n  gravity_gte?: Maybe<Scalars['String']>,\n  gravity_contains?: Maybe<Scalars['String']>,\n  gravity_not_contains?: Maybe<Scalars['String']>,\n  gravity_starts_with?: Maybe<Scalars['String']>,\n  gravity_not_starts_with?: Maybe<Scalars['String']>,\n  gravity_ends_with?: Maybe<Scalars['String']>,\n  gravity_not_ends_with?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  orbitalPeriod_not?: Maybe<Scalars['Int']>,\n  orbitalPeriod_in?: Maybe<Array<Scalars['Int']>>,\n  orbitalPeriod_not_in?: Maybe<Array<Scalars['Int']>>,\n  orbitalPeriod_lt?: Maybe<Scalars['Int']>,\n  orbitalPeriod_lte?: Maybe<Scalars['Int']>,\n  orbitalPeriod_gt?: Maybe<Scalars['Int']>,\n  orbitalPeriod_gte?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  population_not?: Maybe<Scalars['Float']>,\n  population_in?: Maybe<Array<Scalars['Float']>>,\n  population_not_in?: Maybe<Array<Scalars['Float']>>,\n  population_lt?: Maybe<Scalars['Float']>,\n  population_lte?: Maybe<Scalars['Float']>,\n  population_gt?: Maybe<Scalars['Float']>,\n  population_gte?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  rotationPeriod_not?: Maybe<Scalars['Int']>,\n  rotationPeriod_in?: Maybe<Array<Scalars['Int']>>,\n  rotationPeriod_not_in?: Maybe<Array<Scalars['Int']>>,\n  rotationPeriod_lt?: Maybe<Scalars['Int']>,\n  rotationPeriod_lte?: Maybe<Scalars['Int']>,\n  rotationPeriod_gt?: Maybe<Scalars['Int']>,\n  rotationPeriod_gte?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  surfaceWater_not?: Maybe<Scalars['Float']>,\n  surfaceWater_in?: Maybe<Array<Scalars['Float']>>,\n  surfaceWater_not_in?: Maybe<Array<Scalars['Float']>>,\n  surfaceWater_lt?: Maybe<Scalars['Float']>,\n  surfaceWater_lte?: Maybe<Scalars['Float']>,\n  surfaceWater_gt?: Maybe<Scalars['Float']>,\n  surfaceWater_gte?: Maybe<Scalars['Float']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  residents_every?: Maybe<PersonFilter>,\n  residents_some?: Maybe<PersonFilter>,\n  residents_none?: Maybe<PersonFilter>,\n};\n\nexport type PlanetSubscriptionPayload = {\n   __typename?: 'PlanetSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Planet>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<PlanetPreviousValues>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  allAssets: Array<Asset>,\n  allFilms: Array<Film>,\n  allPersons: Array<Person>,\n  allPlanets: Array<Planet>,\n  allSpecies: Array<Species>,\n  allStarships: Array<Starship>,\n  allVehicles: Array<Vehicle>,\n  _allAssetsMeta: _QueryMeta,\n  _allFilmsMeta: _QueryMeta,\n  _allPersonsMeta: _QueryMeta,\n  _allPlanetsMeta: _QueryMeta,\n  _allSpeciesMeta: _QueryMeta,\n  _allStarshipsMeta: _QueryMeta,\n  _allVehiclesMeta: _QueryMeta,\n  Asset?: Maybe<Asset>,\n  Film?: Maybe<Film>,\n  Person?: Maybe<Person>,\n  Planet?: Maybe<Planet>,\n  Species?: Maybe<Species>,\n  Starship?: Maybe<Starship>,\n  Vehicle?: Maybe<Vehicle>,\n  node?: Maybe<Node>,\n};\n\n\nexport type QueryAllAssetsArgs = {\n  filter?: Maybe<AssetFilter>,\n  orderBy?: Maybe<AssetOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAllFilmsArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAllPersonsArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAllPlanetsArgs = {\n  filter?: Maybe<PlanetFilter>,\n  orderBy?: Maybe<PlanetOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAllSpeciesArgs = {\n  filter?: Maybe<SpeciesFilter>,\n  orderBy?: Maybe<SpeciesOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAllStarshipsArgs = {\n  filter?: Maybe<StarshipFilter>,\n  orderBy?: Maybe<StarshipOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAllVehiclesArgs = {\n  filter?: Maybe<VehicleFilter>,\n  orderBy?: Maybe<VehicleOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllAssetsMetaArgs = {\n  filter?: Maybe<AssetFilter>,\n  orderBy?: Maybe<AssetOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllFilmsMetaArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllPersonsMetaArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllPlanetsMetaArgs = {\n  filter?: Maybe<PlanetFilter>,\n  orderBy?: Maybe<PlanetOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllSpeciesMetaArgs = {\n  filter?: Maybe<SpeciesFilter>,\n  orderBy?: Maybe<SpeciesOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllStarshipsMetaArgs = {\n  filter?: Maybe<StarshipFilter>,\n  orderBy?: Maybe<StarshipOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Query_AllVehiclesMetaArgs = {\n  filter?: Maybe<VehicleFilter>,\n  orderBy?: Maybe<VehicleOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryAssetArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type QueryFilmArgs = {\n  id?: Maybe<Scalars['ID']>,\n  title?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryPersonArgs = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryPlanetArgs = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>\n};\n\n\nexport type QuerySpeciesArgs = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryStarshipArgs = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryVehicleArgs = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryNodeArgs = {\n  id: Scalars['ID']\n};\n\nexport type RemoveFromFilmPlanetsPayload = {\n   __typename?: 'RemoveFromFilmPlanetsPayload',\n  filmsFilm?: Maybe<Film>,\n  planetsPlanet?: Maybe<Planet>,\n};\n\nexport type RemoveFromFilmSpeciesPayload = {\n   __typename?: 'RemoveFromFilmSpeciesPayload',\n  filmsFilm?: Maybe<Film>,\n  speciesSpecies?: Maybe<Species>,\n};\n\nexport type RemoveFromFilmStarshipsPayload = {\n   __typename?: 'RemoveFromFilmStarshipsPayload',\n  filmsFilm?: Maybe<Film>,\n  starshipsStarship?: Maybe<Starship>,\n};\n\nexport type RemoveFromFilmVehiclesPayload = {\n   __typename?: 'RemoveFromFilmVehiclesPayload',\n  filmsFilm?: Maybe<Film>,\n  vehiclesVehicle?: Maybe<Vehicle>,\n};\n\nexport type RemoveFromPeopleFilmPayload = {\n   __typename?: 'RemoveFromPeopleFilmPayload',\n  charactersPerson?: Maybe<Person>,\n  filmsFilm?: Maybe<Film>,\n};\n\nexport type RemoveFromPeoplePlanetPayload = {\n   __typename?: 'RemoveFromPeoplePlanetPayload',\n  residentsPerson?: Maybe<Person>,\n  homeworldPlanet?: Maybe<Planet>,\n};\n\nexport type RemoveFromPeopleSpeciesPayload = {\n   __typename?: 'RemoveFromPeopleSpeciesPayload',\n  peoplePerson?: Maybe<Person>,\n  speciesSpecies?: Maybe<Species>,\n};\n\nexport type RemoveFromPeopleStarshipsPayload = {\n   __typename?: 'RemoveFromPeopleStarshipsPayload',\n  pilotsPerson?: Maybe<Person>,\n  starshipsStarship?: Maybe<Starship>,\n};\n\nexport type RemoveFromPeopleVehiclesPayload = {\n   __typename?: 'RemoveFromPeopleVehiclesPayload',\n  pilotsPerson?: Maybe<Person>,\n  vehiclesVehicle?: Maybe<Vehicle>,\n};\n\nexport type Species = Node & {\n   __typename?: 'Species',\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  createdAt: Scalars['DateTime'],\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  films?: Maybe<Array<Film>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  language?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  people?: Maybe<Array<Person>>,\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  updatedAt: Scalars['DateTime'],\n  _filmsMeta: _QueryMeta,\n  _peopleMeta: _QueryMeta,\n};\n\n\nexport type SpeciesFilmsArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type SpeciesPeopleArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Species_FilmsMetaArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Species_PeopleMetaArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport enum Species_Eye_Color {\n  Amber = 'AMBER',\n  Black = 'BLACK',\n  Blue = 'BLUE',\n  Brown = 'BROWN',\n  Gold = 'GOLD',\n  Green = 'GREEN',\n  Grey = 'GREY',\n  Hazel = 'HAZEL',\n  Indigo = 'INDIGO',\n  Orange = 'ORANGE',\n  Pink = 'PINK',\n  Red = 'RED',\n  Silver = 'SILVER',\n  Unknown = 'UNKNOWN',\n  Yellow = 'YELLOW',\n  Golden = 'GOLDEN'\n}\n\nexport enum Species_Hair_Color {\n  Unknown = 'UNKNOWN',\n  Brown = 'BROWN',\n  White = 'WHITE',\n  Red = 'RED',\n  Black = 'BLACK',\n  Blonde = 'BLONDE'\n}\n\nexport enum Species_Skin_Color {\n  Blue = 'BLUE',\n  Brown = 'BROWN',\n  Caucasian = 'CAUCASIAN',\n  Dark = 'DARK',\n  Green = 'GREEN',\n  Grey = 'GREY',\n  Magenta = 'MAGENTA',\n  Orange = 'ORANGE',\n  Pale = 'PALE',\n  Palepink = 'PALEPINK',\n  Peach = 'PEACH',\n  Pink = 'PINK',\n  Purple = 'PURPLE',\n  Red = 'RED',\n  Tan = 'TAN',\n  Unknown = 'UNKNOWN',\n  White = 'WHITE',\n  Yellow = 'YELLOW',\n  Black = 'BLACK',\n  Asian = 'ASIAN',\n  Hispanic = 'HISPANIC'\n}\n\nexport type SpeciesfilmsFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type SpeciesFilter = {\n  AND?: Maybe<Array<SpeciesFilter>>,\n  OR?: Maybe<Array<SpeciesFilter>>,\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageHeight_not?: Maybe<Scalars['Int']>,\n  averageHeight_in?: Maybe<Array<Scalars['Int']>>,\n  averageHeight_not_in?: Maybe<Array<Scalars['Int']>>,\n  averageHeight_lt?: Maybe<Scalars['Int']>,\n  averageHeight_lte?: Maybe<Scalars['Int']>,\n  averageHeight_gt?: Maybe<Scalars['Int']>,\n  averageHeight_gte?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  averageLifespan_not?: Maybe<Scalars['Int']>,\n  averageLifespan_in?: Maybe<Array<Scalars['Int']>>,\n  averageLifespan_not_in?: Maybe<Array<Scalars['Int']>>,\n  averageLifespan_lt?: Maybe<Scalars['Int']>,\n  averageLifespan_lte?: Maybe<Scalars['Int']>,\n  averageLifespan_gt?: Maybe<Scalars['Int']>,\n  averageLifespan_gte?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  classification_not?: Maybe<Scalars['String']>,\n  classification_in?: Maybe<Array<Scalars['String']>>,\n  classification_not_in?: Maybe<Array<Scalars['String']>>,\n  classification_lt?: Maybe<Scalars['String']>,\n  classification_lte?: Maybe<Scalars['String']>,\n  classification_gt?: Maybe<Scalars['String']>,\n  classification_gte?: Maybe<Scalars['String']>,\n  classification_contains?: Maybe<Scalars['String']>,\n  classification_not_contains?: Maybe<Scalars['String']>,\n  classification_starts_with?: Maybe<Scalars['String']>,\n  classification_not_starts_with?: Maybe<Scalars['String']>,\n  classification_ends_with?: Maybe<Scalars['String']>,\n  classification_not_ends_with?: Maybe<Scalars['String']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  designation?: Maybe<Scalars['String']>,\n  designation_not?: Maybe<Scalars['String']>,\n  designation_in?: Maybe<Array<Scalars['String']>>,\n  designation_not_in?: Maybe<Array<Scalars['String']>>,\n  designation_lt?: Maybe<Scalars['String']>,\n  designation_lte?: Maybe<Scalars['String']>,\n  designation_gt?: Maybe<Scalars['String']>,\n  designation_gte?: Maybe<Scalars['String']>,\n  designation_contains?: Maybe<Scalars['String']>,\n  designation_not_contains?: Maybe<Scalars['String']>,\n  designation_starts_with?: Maybe<Scalars['String']>,\n  designation_not_starts_with?: Maybe<Scalars['String']>,\n  designation_ends_with?: Maybe<Scalars['String']>,\n  designation_not_ends_with?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  language_not?: Maybe<Scalars['String']>,\n  language_in?: Maybe<Array<Scalars['String']>>,\n  language_not_in?: Maybe<Array<Scalars['String']>>,\n  language_lt?: Maybe<Scalars['String']>,\n  language_lte?: Maybe<Scalars['String']>,\n  language_gt?: Maybe<Scalars['String']>,\n  language_gte?: Maybe<Scalars['String']>,\n  language_contains?: Maybe<Scalars['String']>,\n  language_not_contains?: Maybe<Scalars['String']>,\n  language_starts_with?: Maybe<Scalars['String']>,\n  language_not_starts_with?: Maybe<Scalars['String']>,\n  language_ends_with?: Maybe<Scalars['String']>,\n  language_not_ends_with?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  people_every?: Maybe<PersonFilter>,\n  people_some?: Maybe<PersonFilter>,\n  people_none?: Maybe<PersonFilter>,\n};\n\nexport enum SpeciesOrderBy {\n  AverageHeightAsc = 'averageHeight_ASC',\n  AverageHeightDesc = 'averageHeight_DESC',\n  AverageLifespanAsc = 'averageLifespan_ASC',\n  AverageLifespanDesc = 'averageLifespan_DESC',\n  ClassificationAsc = 'classification_ASC',\n  ClassificationDesc = 'classification_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  DesignationAsc = 'designation_ASC',\n  DesignationDesc = 'designation_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  LanguageAsc = 'language_ASC',\n  LanguageDesc = 'language_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type SpeciespeoplePerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type SpeciesPreviousValues = {\n   __typename?: 'SpeciesPreviousValues',\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  createdAt: Scalars['DateTime'],\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  language?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type SpeciesSubscriptionFilter = {\n  AND?: Maybe<Array<SpeciesSubscriptionFilter>>,\n  OR?: Maybe<Array<SpeciesSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<SpeciesSubscriptionFilterNode>,\n};\n\nexport type SpeciesSubscriptionFilterNode = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageHeight_not?: Maybe<Scalars['Int']>,\n  averageHeight_in?: Maybe<Array<Scalars['Int']>>,\n  averageHeight_not_in?: Maybe<Array<Scalars['Int']>>,\n  averageHeight_lt?: Maybe<Scalars['Int']>,\n  averageHeight_lte?: Maybe<Scalars['Int']>,\n  averageHeight_gt?: Maybe<Scalars['Int']>,\n  averageHeight_gte?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  averageLifespan_not?: Maybe<Scalars['Int']>,\n  averageLifespan_in?: Maybe<Array<Scalars['Int']>>,\n  averageLifespan_not_in?: Maybe<Array<Scalars['Int']>>,\n  averageLifespan_lt?: Maybe<Scalars['Int']>,\n  averageLifespan_lte?: Maybe<Scalars['Int']>,\n  averageLifespan_gt?: Maybe<Scalars['Int']>,\n  averageLifespan_gte?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  classification_not?: Maybe<Scalars['String']>,\n  classification_in?: Maybe<Array<Scalars['String']>>,\n  classification_not_in?: Maybe<Array<Scalars['String']>>,\n  classification_lt?: Maybe<Scalars['String']>,\n  classification_lte?: Maybe<Scalars['String']>,\n  classification_gt?: Maybe<Scalars['String']>,\n  classification_gte?: Maybe<Scalars['String']>,\n  classification_contains?: Maybe<Scalars['String']>,\n  classification_not_contains?: Maybe<Scalars['String']>,\n  classification_starts_with?: Maybe<Scalars['String']>,\n  classification_not_starts_with?: Maybe<Scalars['String']>,\n  classification_ends_with?: Maybe<Scalars['String']>,\n  classification_not_ends_with?: Maybe<Scalars['String']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  designation?: Maybe<Scalars['String']>,\n  designation_not?: Maybe<Scalars['String']>,\n  designation_in?: Maybe<Array<Scalars['String']>>,\n  designation_not_in?: Maybe<Array<Scalars['String']>>,\n  designation_lt?: Maybe<Scalars['String']>,\n  designation_lte?: Maybe<Scalars['String']>,\n  designation_gt?: Maybe<Scalars['String']>,\n  designation_gte?: Maybe<Scalars['String']>,\n  designation_contains?: Maybe<Scalars['String']>,\n  designation_not_contains?: Maybe<Scalars['String']>,\n  designation_starts_with?: Maybe<Scalars['String']>,\n  designation_not_starts_with?: Maybe<Scalars['String']>,\n  designation_ends_with?: Maybe<Scalars['String']>,\n  designation_not_ends_with?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  language_not?: Maybe<Scalars['String']>,\n  language_in?: Maybe<Array<Scalars['String']>>,\n  language_not_in?: Maybe<Array<Scalars['String']>>,\n  language_lt?: Maybe<Scalars['String']>,\n  language_lte?: Maybe<Scalars['String']>,\n  language_gt?: Maybe<Scalars['String']>,\n  language_gte?: Maybe<Scalars['String']>,\n  language_contains?: Maybe<Scalars['String']>,\n  language_not_contains?: Maybe<Scalars['String']>,\n  language_starts_with?: Maybe<Scalars['String']>,\n  language_not_starts_with?: Maybe<Scalars['String']>,\n  language_ends_with?: Maybe<Scalars['String']>,\n  language_not_ends_with?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  people_every?: Maybe<PersonFilter>,\n  people_some?: Maybe<PersonFilter>,\n  people_none?: Maybe<PersonFilter>,\n};\n\nexport type SpeciesSubscriptionPayload = {\n   __typename?: 'SpeciesSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Species>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<SpeciesPreviousValues>,\n};\n\nexport type Starship = Node & {\n   __typename?: 'Starship',\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  createdAt: Scalars['DateTime'],\n  crew?: Maybe<Scalars['Int']>,\n  films?: Maybe<Array<Film>>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  pilots?: Maybe<Array<Person>>,\n  updatedAt: Scalars['DateTime'],\n  _filmsMeta: _QueryMeta,\n  _pilotsMeta: _QueryMeta,\n};\n\n\nexport type StarshipFilmsArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type StarshipPilotsArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Starship_FilmsMetaArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Starship_PilotsMetaArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type StarshipfilmsFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type StarshipFilter = {\n  AND?: Maybe<Array<StarshipFilter>>,\n  OR?: Maybe<Array<StarshipFilter>>,\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  cargoCapacity_not?: Maybe<Scalars['Float']>,\n  cargoCapacity_in?: Maybe<Array<Scalars['Float']>>,\n  cargoCapacity_not_in?: Maybe<Array<Scalars['Float']>>,\n  cargoCapacity_lt?: Maybe<Scalars['Float']>,\n  cargoCapacity_lte?: Maybe<Scalars['Float']>,\n  cargoCapacity_gt?: Maybe<Scalars['Float']>,\n  cargoCapacity_gte?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  class_not?: Maybe<Scalars['String']>,\n  class_in?: Maybe<Array<Scalars['String']>>,\n  class_not_in?: Maybe<Array<Scalars['String']>>,\n  class_lt?: Maybe<Scalars['String']>,\n  class_lte?: Maybe<Scalars['String']>,\n  class_gt?: Maybe<Scalars['String']>,\n  class_gte?: Maybe<Scalars['String']>,\n  class_contains?: Maybe<Scalars['String']>,\n  class_not_contains?: Maybe<Scalars['String']>,\n  class_starts_with?: Maybe<Scalars['String']>,\n  class_not_starts_with?: Maybe<Scalars['String']>,\n  class_ends_with?: Maybe<Scalars['String']>,\n  class_not_ends_with?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  consumables_not?: Maybe<Scalars['String']>,\n  consumables_in?: Maybe<Array<Scalars['String']>>,\n  consumables_not_in?: Maybe<Array<Scalars['String']>>,\n  consumables_lt?: Maybe<Scalars['String']>,\n  consumables_lte?: Maybe<Scalars['String']>,\n  consumables_gt?: Maybe<Scalars['String']>,\n  consumables_gte?: Maybe<Scalars['String']>,\n  consumables_contains?: Maybe<Scalars['String']>,\n  consumables_not_contains?: Maybe<Scalars['String']>,\n  consumables_starts_with?: Maybe<Scalars['String']>,\n  consumables_not_starts_with?: Maybe<Scalars['String']>,\n  consumables_ends_with?: Maybe<Scalars['String']>,\n  consumables_not_ends_with?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  costInCredits_not?: Maybe<Scalars['Float']>,\n  costInCredits_in?: Maybe<Array<Scalars['Float']>>,\n  costInCredits_not_in?: Maybe<Array<Scalars['Float']>>,\n  costInCredits_lt?: Maybe<Scalars['Float']>,\n  costInCredits_lte?: Maybe<Scalars['Float']>,\n  costInCredits_gt?: Maybe<Scalars['Float']>,\n  costInCredits_gte?: Maybe<Scalars['Float']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  crew?: Maybe<Scalars['Int']>,\n  crew_not?: Maybe<Scalars['Int']>,\n  crew_in?: Maybe<Array<Scalars['Int']>>,\n  crew_not_in?: Maybe<Array<Scalars['Int']>>,\n  crew_lt?: Maybe<Scalars['Int']>,\n  crew_lte?: Maybe<Scalars['Int']>,\n  crew_gt?: Maybe<Scalars['Int']>,\n  crew_gte?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  hyperdriveRating_not?: Maybe<Scalars['Float']>,\n  hyperdriveRating_in?: Maybe<Array<Scalars['Float']>>,\n  hyperdriveRating_not_in?: Maybe<Array<Scalars['Float']>>,\n  hyperdriveRating_lt?: Maybe<Scalars['Float']>,\n  hyperdriveRating_lte?: Maybe<Scalars['Float']>,\n  hyperdriveRating_gt?: Maybe<Scalars['Float']>,\n  hyperdriveRating_gte?: Maybe<Scalars['Float']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  length_not?: Maybe<Scalars['Float']>,\n  length_in?: Maybe<Array<Scalars['Float']>>,\n  length_not_in?: Maybe<Array<Scalars['Float']>>,\n  length_lt?: Maybe<Scalars['Float']>,\n  length_lte?: Maybe<Scalars['Float']>,\n  length_gt?: Maybe<Scalars['Float']>,\n  length_gte?: Maybe<Scalars['Float']>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_not?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_not_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_lt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_lte?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gte?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  mglt_not?: Maybe<Scalars['Int']>,\n  mglt_in?: Maybe<Array<Scalars['Int']>>,\n  mglt_not_in?: Maybe<Array<Scalars['Int']>>,\n  mglt_lt?: Maybe<Scalars['Int']>,\n  mglt_lte?: Maybe<Scalars['Int']>,\n  mglt_gt?: Maybe<Scalars['Int']>,\n  mglt_gte?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  passengers_not?: Maybe<Scalars['Int']>,\n  passengers_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_not_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_lt?: Maybe<Scalars['Int']>,\n  passengers_lte?: Maybe<Scalars['Int']>,\n  passengers_gt?: Maybe<Scalars['Int']>,\n  passengers_gte?: Maybe<Scalars['Int']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  pilots_every?: Maybe<PersonFilter>,\n  pilots_some?: Maybe<PersonFilter>,\n  pilots_none?: Maybe<PersonFilter>,\n};\n\nexport enum StarshipOrderBy {\n  CargoCapacityAsc = 'cargoCapacity_ASC',\n  CargoCapacityDesc = 'cargoCapacity_DESC',\n  ClassAsc = 'class_ASC',\n  ClassDesc = 'class_DESC',\n  ConsumablesAsc = 'consumables_ASC',\n  ConsumablesDesc = 'consumables_DESC',\n  CostInCreditsAsc = 'costInCredits_ASC',\n  CostInCreditsDesc = 'costInCredits_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  CrewAsc = 'crew_ASC',\n  CrewDesc = 'crew_DESC',\n  HyperdriveRatingAsc = 'hyperdriveRating_ASC',\n  HyperdriveRatingDesc = 'hyperdriveRating_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  LengthAsc = 'length_ASC',\n  LengthDesc = 'length_DESC',\n  MaxAtmospheringSpeedAsc = 'maxAtmospheringSpeed_ASC',\n  MaxAtmospheringSpeedDesc = 'maxAtmospheringSpeed_DESC',\n  MgltAsc = 'mglt_ASC',\n  MgltDesc = 'mglt_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  PassengersAsc = 'passengers_ASC',\n  PassengersDesc = 'passengers_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type StarshippilotsPerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type StarshipPreviousValues = {\n   __typename?: 'StarshipPreviousValues',\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  createdAt: Scalars['DateTime'],\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type StarshipSubscriptionFilter = {\n  AND?: Maybe<Array<StarshipSubscriptionFilter>>,\n  OR?: Maybe<Array<StarshipSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<StarshipSubscriptionFilterNode>,\n};\n\nexport type StarshipSubscriptionFilterNode = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  cargoCapacity_not?: Maybe<Scalars['Float']>,\n  cargoCapacity_in?: Maybe<Array<Scalars['Float']>>,\n  cargoCapacity_not_in?: Maybe<Array<Scalars['Float']>>,\n  cargoCapacity_lt?: Maybe<Scalars['Float']>,\n  cargoCapacity_lte?: Maybe<Scalars['Float']>,\n  cargoCapacity_gt?: Maybe<Scalars['Float']>,\n  cargoCapacity_gte?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  class_not?: Maybe<Scalars['String']>,\n  class_in?: Maybe<Array<Scalars['String']>>,\n  class_not_in?: Maybe<Array<Scalars['String']>>,\n  class_lt?: Maybe<Scalars['String']>,\n  class_lte?: Maybe<Scalars['String']>,\n  class_gt?: Maybe<Scalars['String']>,\n  class_gte?: Maybe<Scalars['String']>,\n  class_contains?: Maybe<Scalars['String']>,\n  class_not_contains?: Maybe<Scalars['String']>,\n  class_starts_with?: Maybe<Scalars['String']>,\n  class_not_starts_with?: Maybe<Scalars['String']>,\n  class_ends_with?: Maybe<Scalars['String']>,\n  class_not_ends_with?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  consumables_not?: Maybe<Scalars['String']>,\n  consumables_in?: Maybe<Array<Scalars['String']>>,\n  consumables_not_in?: Maybe<Array<Scalars['String']>>,\n  consumables_lt?: Maybe<Scalars['String']>,\n  consumables_lte?: Maybe<Scalars['String']>,\n  consumables_gt?: Maybe<Scalars['String']>,\n  consumables_gte?: Maybe<Scalars['String']>,\n  consumables_contains?: Maybe<Scalars['String']>,\n  consumables_not_contains?: Maybe<Scalars['String']>,\n  consumables_starts_with?: Maybe<Scalars['String']>,\n  consumables_not_starts_with?: Maybe<Scalars['String']>,\n  consumables_ends_with?: Maybe<Scalars['String']>,\n  consumables_not_ends_with?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  costInCredits_not?: Maybe<Scalars['Float']>,\n  costInCredits_in?: Maybe<Array<Scalars['Float']>>,\n  costInCredits_not_in?: Maybe<Array<Scalars['Float']>>,\n  costInCredits_lt?: Maybe<Scalars['Float']>,\n  costInCredits_lte?: Maybe<Scalars['Float']>,\n  costInCredits_gt?: Maybe<Scalars['Float']>,\n  costInCredits_gte?: Maybe<Scalars['Float']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  crew?: Maybe<Scalars['Int']>,\n  crew_not?: Maybe<Scalars['Int']>,\n  crew_in?: Maybe<Array<Scalars['Int']>>,\n  crew_not_in?: Maybe<Array<Scalars['Int']>>,\n  crew_lt?: Maybe<Scalars['Int']>,\n  crew_lte?: Maybe<Scalars['Int']>,\n  crew_gt?: Maybe<Scalars['Int']>,\n  crew_gte?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  hyperdriveRating_not?: Maybe<Scalars['Float']>,\n  hyperdriveRating_in?: Maybe<Array<Scalars['Float']>>,\n  hyperdriveRating_not_in?: Maybe<Array<Scalars['Float']>>,\n  hyperdriveRating_lt?: Maybe<Scalars['Float']>,\n  hyperdriveRating_lte?: Maybe<Scalars['Float']>,\n  hyperdriveRating_gt?: Maybe<Scalars['Float']>,\n  hyperdriveRating_gte?: Maybe<Scalars['Float']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  length_not?: Maybe<Scalars['Float']>,\n  length_in?: Maybe<Array<Scalars['Float']>>,\n  length_not_in?: Maybe<Array<Scalars['Float']>>,\n  length_lt?: Maybe<Scalars['Float']>,\n  length_lte?: Maybe<Scalars['Float']>,\n  length_gt?: Maybe<Scalars['Float']>,\n  length_gte?: Maybe<Scalars['Float']>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_not?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_not_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_lt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_lte?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gte?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  mglt_not?: Maybe<Scalars['Int']>,\n  mglt_in?: Maybe<Array<Scalars['Int']>>,\n  mglt_not_in?: Maybe<Array<Scalars['Int']>>,\n  mglt_lt?: Maybe<Scalars['Int']>,\n  mglt_lte?: Maybe<Scalars['Int']>,\n  mglt_gt?: Maybe<Scalars['Int']>,\n  mglt_gte?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  passengers_not?: Maybe<Scalars['Int']>,\n  passengers_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_not_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_lt?: Maybe<Scalars['Int']>,\n  passengers_lte?: Maybe<Scalars['Int']>,\n  passengers_gt?: Maybe<Scalars['Int']>,\n  passengers_gte?: Maybe<Scalars['Int']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  pilots_every?: Maybe<PersonFilter>,\n  pilots_some?: Maybe<PersonFilter>,\n  pilots_none?: Maybe<PersonFilter>,\n};\n\nexport type StarshipSubscriptionPayload = {\n   __typename?: 'StarshipSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Starship>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<StarshipPreviousValues>,\n};\n\nexport type Subscription = {\n   __typename?: 'Subscription',\n  Asset?: Maybe<AssetSubscriptionPayload>,\n  Film?: Maybe<FilmSubscriptionPayload>,\n  Person?: Maybe<PersonSubscriptionPayload>,\n  Planet?: Maybe<PlanetSubscriptionPayload>,\n  Species?: Maybe<SpeciesSubscriptionPayload>,\n  Starship?: Maybe<StarshipSubscriptionPayload>,\n  Vehicle?: Maybe<VehicleSubscriptionPayload>,\n};\n\n\nexport type SubscriptionAssetArgs = {\n  filter?: Maybe<AssetSubscriptionFilter>\n};\n\n\nexport type SubscriptionFilmArgs = {\n  filter?: Maybe<FilmSubscriptionFilter>\n};\n\n\nexport type SubscriptionPersonArgs = {\n  filter?: Maybe<PersonSubscriptionFilter>\n};\n\n\nexport type SubscriptionPlanetArgs = {\n  filter?: Maybe<PlanetSubscriptionFilter>\n};\n\n\nexport type SubscriptionSpeciesArgs = {\n  filter?: Maybe<SpeciesSubscriptionFilter>\n};\n\n\nexport type SubscriptionStarshipArgs = {\n  filter?: Maybe<StarshipSubscriptionFilter>\n};\n\n\nexport type SubscriptionVehicleArgs = {\n  filter?: Maybe<VehicleSubscriptionFilter>\n};\n\nexport type UpdateAsset = {\n  fileName?: Maybe<Scalars['String']>,\n  handle?: Maybe<Scalars['String']>,\n  height?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  mimeType?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['Float']>,\n  url?: Maybe<Scalars['String']>,\n  width?: Maybe<Scalars['Float']>,\n};\n\nexport type UpdateFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title?: Maybe<Scalars['String']>,\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type UpdatePerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name?: Maybe<Scalars['String']>,\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type UpdatePlanet = {\n  climate?: Maybe<Array<Scalars['String']>>,\n  diameter?: Maybe<Scalars['Int']>,\n  gravity?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  name?: Maybe<Scalars['String']>,\n  orbitalPeriod?: Maybe<Scalars['Int']>,\n  population?: Maybe<Scalars['Float']>,\n  rotationPeriod?: Maybe<Scalars['Int']>,\n  surfaceWater?: Maybe<Scalars['Float']>,\n  terrain?: Maybe<Array<Scalars['String']>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PlanetfilmsFilm>>,\n  residentsIds?: Maybe<Array<Scalars['ID']>>,\n  residents?: Maybe<Array<PlanetresidentsPerson>>,\n};\n\nexport type UpdateSpecies = {\n  averageHeight?: Maybe<Scalars['Int']>,\n  averageLifespan?: Maybe<Scalars['Int']>,\n  classification?: Maybe<Scalars['String']>,\n  designation?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Species_Eye_Color>>,\n  hairColor?: Maybe<Array<Species_Hair_Color>>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  language?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  skinColor?: Maybe<Array<Species_Skin_Color>>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<SpeciesfilmsFilm>>,\n  peopleIds?: Maybe<Array<Scalars['ID']>>,\n  people?: Maybe<Array<SpeciespeoplePerson>>,\n};\n\nexport type UpdateStarship = {\n  cargoCapacity?: Maybe<Scalars['Float']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Float']>,\n  crew?: Maybe<Scalars['Int']>,\n  hyperdriveRating?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  mglt?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<StarshipfilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<StarshippilotsPerson>>,\n};\n\nexport type UpdateVehicle = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  crew?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<VehiclefilmsFilm>>,\n  pilotsIds?: Maybe<Array<Scalars['ID']>>,\n  pilots?: Maybe<Array<VehiclepilotsPerson>>,\n};\n\nexport type Vehicle = Node & {\n   __typename?: 'Vehicle',\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  createdAt: Scalars['DateTime'],\n  crew?: Maybe<Scalars['Int']>,\n  films?: Maybe<Array<Film>>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  pilots?: Maybe<Array<Person>>,\n  updatedAt: Scalars['DateTime'],\n  _filmsMeta: _QueryMeta,\n  _pilotsMeta: _QueryMeta,\n};\n\n\nexport type VehicleFilmsArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type VehiclePilotsArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Vehicle_FilmsMetaArgs = {\n  filter?: Maybe<FilmFilter>,\n  orderBy?: Maybe<FilmOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type Vehicle_PilotsMetaArgs = {\n  filter?: Maybe<PersonFilter>,\n  orderBy?: Maybe<PersonOrderBy>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type VehiclefilmsFilm = {\n  director?: Maybe<Scalars['String']>,\n  episodeId: Scalars['Int'],\n  isPublished?: Maybe<Scalars['Boolean']>,\n  openingCrawl?: Maybe<Scalars['String']>,\n  producers?: Maybe<Array<Scalars['String']>>,\n  releaseDate?: Maybe<Scalars['DateTime']>,\n  title: Scalars['String'],\n  charactersIds?: Maybe<Array<Scalars['ID']>>,\n  characters?: Maybe<Array<FilmcharactersPerson>>,\n  planetsIds?: Maybe<Array<Scalars['ID']>>,\n  planets?: Maybe<Array<FilmplanetsPlanet>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<FilmspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<FilmstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<FilmvehiclesVehicle>>,\n};\n\nexport type VehicleFilter = {\n  AND?: Maybe<Array<VehicleFilter>>,\n  OR?: Maybe<Array<VehicleFilter>>,\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  cargoCapacity_not?: Maybe<Scalars['Int']>,\n  cargoCapacity_in?: Maybe<Array<Scalars['Int']>>,\n  cargoCapacity_not_in?: Maybe<Array<Scalars['Int']>>,\n  cargoCapacity_lt?: Maybe<Scalars['Int']>,\n  cargoCapacity_lte?: Maybe<Scalars['Int']>,\n  cargoCapacity_gt?: Maybe<Scalars['Int']>,\n  cargoCapacity_gte?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  class_not?: Maybe<Scalars['String']>,\n  class_in?: Maybe<Array<Scalars['String']>>,\n  class_not_in?: Maybe<Array<Scalars['String']>>,\n  class_lt?: Maybe<Scalars['String']>,\n  class_lte?: Maybe<Scalars['String']>,\n  class_gt?: Maybe<Scalars['String']>,\n  class_gte?: Maybe<Scalars['String']>,\n  class_contains?: Maybe<Scalars['String']>,\n  class_not_contains?: Maybe<Scalars['String']>,\n  class_starts_with?: Maybe<Scalars['String']>,\n  class_not_starts_with?: Maybe<Scalars['String']>,\n  class_ends_with?: Maybe<Scalars['String']>,\n  class_not_ends_with?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  consumables_not?: Maybe<Scalars['String']>,\n  consumables_in?: Maybe<Array<Scalars['String']>>,\n  consumables_not_in?: Maybe<Array<Scalars['String']>>,\n  consumables_lt?: Maybe<Scalars['String']>,\n  consumables_lte?: Maybe<Scalars['String']>,\n  consumables_gt?: Maybe<Scalars['String']>,\n  consumables_gte?: Maybe<Scalars['String']>,\n  consumables_contains?: Maybe<Scalars['String']>,\n  consumables_not_contains?: Maybe<Scalars['String']>,\n  consumables_starts_with?: Maybe<Scalars['String']>,\n  consumables_not_starts_with?: Maybe<Scalars['String']>,\n  consumables_ends_with?: Maybe<Scalars['String']>,\n  consumables_not_ends_with?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  costInCredits_not?: Maybe<Scalars['Int']>,\n  costInCredits_in?: Maybe<Array<Scalars['Int']>>,\n  costInCredits_not_in?: Maybe<Array<Scalars['Int']>>,\n  costInCredits_lt?: Maybe<Scalars['Int']>,\n  costInCredits_lte?: Maybe<Scalars['Int']>,\n  costInCredits_gt?: Maybe<Scalars['Int']>,\n  costInCredits_gte?: Maybe<Scalars['Int']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  crew?: Maybe<Scalars['Int']>,\n  crew_not?: Maybe<Scalars['Int']>,\n  crew_in?: Maybe<Array<Scalars['Int']>>,\n  crew_not_in?: Maybe<Array<Scalars['Int']>>,\n  crew_lt?: Maybe<Scalars['Int']>,\n  crew_lte?: Maybe<Scalars['Int']>,\n  crew_gt?: Maybe<Scalars['Int']>,\n  crew_gte?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  length_not?: Maybe<Scalars['Float']>,\n  length_in?: Maybe<Array<Scalars['Float']>>,\n  length_not_in?: Maybe<Array<Scalars['Float']>>,\n  length_lt?: Maybe<Scalars['Float']>,\n  length_lte?: Maybe<Scalars['Float']>,\n  length_gt?: Maybe<Scalars['Float']>,\n  length_gte?: Maybe<Scalars['Float']>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_not?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_not_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_lt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_lte?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gte?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  model_not?: Maybe<Scalars['String']>,\n  model_in?: Maybe<Array<Scalars['String']>>,\n  model_not_in?: Maybe<Array<Scalars['String']>>,\n  model_lt?: Maybe<Scalars['String']>,\n  model_lte?: Maybe<Scalars['String']>,\n  model_gt?: Maybe<Scalars['String']>,\n  model_gte?: Maybe<Scalars['String']>,\n  model_contains?: Maybe<Scalars['String']>,\n  model_not_contains?: Maybe<Scalars['String']>,\n  model_starts_with?: Maybe<Scalars['String']>,\n  model_not_starts_with?: Maybe<Scalars['String']>,\n  model_ends_with?: Maybe<Scalars['String']>,\n  model_not_ends_with?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  passengers_not?: Maybe<Scalars['Int']>,\n  passengers_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_not_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_lt?: Maybe<Scalars['Int']>,\n  passengers_lte?: Maybe<Scalars['Int']>,\n  passengers_gt?: Maybe<Scalars['Int']>,\n  passengers_gte?: Maybe<Scalars['Int']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  pilots_every?: Maybe<PersonFilter>,\n  pilots_some?: Maybe<PersonFilter>,\n  pilots_none?: Maybe<PersonFilter>,\n};\n\nexport enum VehicleOrderBy {\n  CargoCapacityAsc = 'cargoCapacity_ASC',\n  CargoCapacityDesc = 'cargoCapacity_DESC',\n  ClassAsc = 'class_ASC',\n  ClassDesc = 'class_DESC',\n  ConsumablesAsc = 'consumables_ASC',\n  ConsumablesDesc = 'consumables_DESC',\n  CostInCreditsAsc = 'costInCredits_ASC',\n  CostInCreditsDesc = 'costInCredits_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  CrewAsc = 'crew_ASC',\n  CrewDesc = 'crew_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  LengthAsc = 'length_ASC',\n  LengthDesc = 'length_DESC',\n  MaxAtmospheringSpeedAsc = 'maxAtmospheringSpeed_ASC',\n  MaxAtmospheringSpeedDesc = 'maxAtmospheringSpeed_DESC',\n  ModelAsc = 'model_ASC',\n  ModelDesc = 'model_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  PassengersAsc = 'passengers_ASC',\n  PassengersDesc = 'passengers_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type VehiclepilotsPerson = {\n  birthYear?: Maybe<Scalars['String']>,\n  eyeColor?: Maybe<Array<Person_Eye_Color>>,\n  gender?: Maybe<Person_Gender>,\n  hairColor?: Maybe<Array<Person_Hair_Color>>,\n  height?: Maybe<Scalars['Int']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  mass?: Maybe<Scalars['Float']>,\n  name: Scalars['String'],\n  skinColor?: Maybe<Array<Person_Skin_Color>>,\n  homeworldId?: Maybe<Scalars['ID']>,\n  homeworld?: Maybe<PersonhomeworldPlanet>,\n  filmsIds?: Maybe<Array<Scalars['ID']>>,\n  films?: Maybe<Array<PersonfilmsFilm>>,\n  speciesIds?: Maybe<Array<Scalars['ID']>>,\n  species?: Maybe<Array<PersonspeciesSpecies>>,\n  starshipsIds?: Maybe<Array<Scalars['ID']>>,\n  starships?: Maybe<Array<PersonstarshipsStarship>>,\n  vehiclesIds?: Maybe<Array<Scalars['ID']>>,\n  vehicles?: Maybe<Array<PersonvehiclesVehicle>>,\n};\n\nexport type VehiclePreviousValues = {\n   __typename?: 'VehiclePreviousValues',\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  createdAt: Scalars['DateTime'],\n  crew?: Maybe<Scalars['Int']>,\n  id: Scalars['ID'],\n  isPublished: Scalars['Boolean'],\n  length?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Array<Scalars['String']>>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  passengers?: Maybe<Scalars['Int']>,\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type VehicleSubscriptionFilter = {\n  AND?: Maybe<Array<VehicleSubscriptionFilter>>,\n  OR?: Maybe<Array<VehicleSubscriptionFilter>>,\n  mutation_in?: Maybe<Array<_ModelMutationType>>,\n  updatedFields_contains?: Maybe<Scalars['String']>,\n  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>,\n  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>,\n  node?: Maybe<VehicleSubscriptionFilterNode>,\n};\n\nexport type VehicleSubscriptionFilterNode = {\n  cargoCapacity?: Maybe<Scalars['Int']>,\n  cargoCapacity_not?: Maybe<Scalars['Int']>,\n  cargoCapacity_in?: Maybe<Array<Scalars['Int']>>,\n  cargoCapacity_not_in?: Maybe<Array<Scalars['Int']>>,\n  cargoCapacity_lt?: Maybe<Scalars['Int']>,\n  cargoCapacity_lte?: Maybe<Scalars['Int']>,\n  cargoCapacity_gt?: Maybe<Scalars['Int']>,\n  cargoCapacity_gte?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['String']>,\n  class_not?: Maybe<Scalars['String']>,\n  class_in?: Maybe<Array<Scalars['String']>>,\n  class_not_in?: Maybe<Array<Scalars['String']>>,\n  class_lt?: Maybe<Scalars['String']>,\n  class_lte?: Maybe<Scalars['String']>,\n  class_gt?: Maybe<Scalars['String']>,\n  class_gte?: Maybe<Scalars['String']>,\n  class_contains?: Maybe<Scalars['String']>,\n  class_not_contains?: Maybe<Scalars['String']>,\n  class_starts_with?: Maybe<Scalars['String']>,\n  class_not_starts_with?: Maybe<Scalars['String']>,\n  class_ends_with?: Maybe<Scalars['String']>,\n  class_not_ends_with?: Maybe<Scalars['String']>,\n  consumables?: Maybe<Scalars['String']>,\n  consumables_not?: Maybe<Scalars['String']>,\n  consumables_in?: Maybe<Array<Scalars['String']>>,\n  consumables_not_in?: Maybe<Array<Scalars['String']>>,\n  consumables_lt?: Maybe<Scalars['String']>,\n  consumables_lte?: Maybe<Scalars['String']>,\n  consumables_gt?: Maybe<Scalars['String']>,\n  consumables_gte?: Maybe<Scalars['String']>,\n  consumables_contains?: Maybe<Scalars['String']>,\n  consumables_not_contains?: Maybe<Scalars['String']>,\n  consumables_starts_with?: Maybe<Scalars['String']>,\n  consumables_not_starts_with?: Maybe<Scalars['String']>,\n  consumables_ends_with?: Maybe<Scalars['String']>,\n  consumables_not_ends_with?: Maybe<Scalars['String']>,\n  costInCredits?: Maybe<Scalars['Int']>,\n  costInCredits_not?: Maybe<Scalars['Int']>,\n  costInCredits_in?: Maybe<Array<Scalars['Int']>>,\n  costInCredits_not_in?: Maybe<Array<Scalars['Int']>>,\n  costInCredits_lt?: Maybe<Scalars['Int']>,\n  costInCredits_lte?: Maybe<Scalars['Int']>,\n  costInCredits_gt?: Maybe<Scalars['Int']>,\n  costInCredits_gte?: Maybe<Scalars['Int']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  crew?: Maybe<Scalars['Int']>,\n  crew_not?: Maybe<Scalars['Int']>,\n  crew_in?: Maybe<Array<Scalars['Int']>>,\n  crew_not_in?: Maybe<Array<Scalars['Int']>>,\n  crew_lt?: Maybe<Scalars['Int']>,\n  crew_lte?: Maybe<Scalars['Int']>,\n  crew_gt?: Maybe<Scalars['Int']>,\n  crew_gte?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  isPublished?: Maybe<Scalars['Boolean']>,\n  isPublished_not?: Maybe<Scalars['Boolean']>,\n  length?: Maybe<Scalars['Float']>,\n  length_not?: Maybe<Scalars['Float']>,\n  length_in?: Maybe<Array<Scalars['Float']>>,\n  length_not_in?: Maybe<Array<Scalars['Float']>>,\n  length_lt?: Maybe<Scalars['Float']>,\n  length_lte?: Maybe<Scalars['Float']>,\n  length_gt?: Maybe<Scalars['Float']>,\n  length_gte?: Maybe<Scalars['Float']>,\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_not?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_not_in?: Maybe<Array<Scalars['Int']>>,\n  maxAtmospheringSpeed_lt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_lte?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gt?: Maybe<Scalars['Int']>,\n  maxAtmospheringSpeed_gte?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  model_not?: Maybe<Scalars['String']>,\n  model_in?: Maybe<Array<Scalars['String']>>,\n  model_not_in?: Maybe<Array<Scalars['String']>>,\n  model_lt?: Maybe<Scalars['String']>,\n  model_lte?: Maybe<Scalars['String']>,\n  model_gt?: Maybe<Scalars['String']>,\n  model_gte?: Maybe<Scalars['String']>,\n  model_contains?: Maybe<Scalars['String']>,\n  model_not_contains?: Maybe<Scalars['String']>,\n  model_starts_with?: Maybe<Scalars['String']>,\n  model_not_starts_with?: Maybe<Scalars['String']>,\n  model_ends_with?: Maybe<Scalars['String']>,\n  model_not_ends_with?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  passengers?: Maybe<Scalars['Int']>,\n  passengers_not?: Maybe<Scalars['Int']>,\n  passengers_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_not_in?: Maybe<Array<Scalars['Int']>>,\n  passengers_lt?: Maybe<Scalars['Int']>,\n  passengers_lte?: Maybe<Scalars['Int']>,\n  passengers_gt?: Maybe<Scalars['Int']>,\n  passengers_gte?: Maybe<Scalars['Int']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  films_every?: Maybe<FilmFilter>,\n  films_some?: Maybe<FilmFilter>,\n  films_none?: Maybe<FilmFilter>,\n  pilots_every?: Maybe<PersonFilter>,\n  pilots_some?: Maybe<PersonFilter>,\n  pilots_none?: Maybe<PersonFilter>,\n};\n\nexport type VehicleSubscriptionPayload = {\n   __typename?: 'VehicleSubscriptionPayload',\n  mutation: _ModelMutationType,\n  node?: Maybe<Vehicle>,\n  updatedFields?: Maybe<Array<Scalars['String']>>,\n  previousValues?: Maybe<VehiclePreviousValues>,\n};\n\nexport type AllCharacterNamesQueryVariables = {};\n\n\nexport type AllCharacterNamesQuery = (\n  { __typename?: 'Query' }\n  & { allPersons: Array<(\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'name'>\n  )> }\n);\n\nexport type AllFilmsQueryVariables = {};\n\n\nexport type AllFilmsQuery = (\n  { __typename?: 'Query' }\n  & { allFilms: Array<(\n    { __typename?: 'Film' }\n    & Pick<Film, 'id' | 'title'>\n  )> }\n);\n\nexport type AllStarshipsQueryVariables = {};\n\n\nexport type AllStarshipsQuery = (\n  { __typename?: 'Query' }\n  & { allStarships: Array<(\n    { __typename?: 'Starship' }\n    & Pick<Starship, 'id' | 'name'>\n  )> }\n);\n\n\nexport const AllCharacterNamesDocument = gql`\n    query AllCharacterNames {\n  allPersons {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useAllCharacterNamesQuery__\n *\n * To run a query within a React component, call `useAllCharacterNamesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllCharacterNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllCharacterNamesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllCharacterNamesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllCharacterNamesQuery, AllCharacterNamesQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllCharacterNamesQuery, AllCharacterNamesQueryVariables>(AllCharacterNamesDocument, baseOptions);\n      }\nexport function useAllCharacterNamesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllCharacterNamesQuery, AllCharacterNamesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllCharacterNamesQuery, AllCharacterNamesQueryVariables>(AllCharacterNamesDocument, baseOptions);\n        }\nexport type AllCharacterNamesQueryHookResult = ReturnType<typeof useAllCharacterNamesQuery>;\nexport type AllCharacterNamesLazyQueryHookResult = ReturnType<typeof useAllCharacterNamesLazyQuery>;\nexport type AllCharacterNamesQueryResult = ApolloReactCommon.QueryResult<AllCharacterNamesQuery, AllCharacterNamesQueryVariables>;\nexport const AllFilmsDocument = gql`\n    query AllFilms {\n  allFilms {\n    id\n    title\n  }\n}\n    `;\n\n/**\n * __useAllFilmsQuery__\n *\n * To run a query within a React component, call `useAllFilmsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllFilmsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllFilmsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllFilmsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllFilmsQuery, AllFilmsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllFilmsQuery, AllFilmsQueryVariables>(AllFilmsDocument, baseOptions);\n      }\nexport function useAllFilmsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllFilmsQuery, AllFilmsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllFilmsQuery, AllFilmsQueryVariables>(AllFilmsDocument, baseOptions);\n        }\nexport type AllFilmsQueryHookResult = ReturnType<typeof useAllFilmsQuery>;\nexport type AllFilmsLazyQueryHookResult = ReturnType<typeof useAllFilmsLazyQuery>;\nexport type AllFilmsQueryResult = ApolloReactCommon.QueryResult<AllFilmsQuery, AllFilmsQueryVariables>;\nexport const AllStarshipsDocument = gql`\n    query AllStarships {\n  allStarships {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useAllStarshipsQuery__\n *\n * To run a query within a React component, call `useAllStarshipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllStarshipsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllStarshipsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllStarshipsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllStarshipsQuery, AllStarshipsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllStarshipsQuery, AllStarshipsQueryVariables>(AllStarshipsDocument, baseOptions);\n      }\nexport function useAllStarshipsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllStarshipsQuery, AllStarshipsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllStarshipsQuery, AllStarshipsQueryVariables>(AllStarshipsDocument, baseOptions);\n        }\nexport type AllStarshipsQueryHookResult = ReturnType<typeof useAllStarshipsQuery>;\nexport type AllStarshipsLazyQueryHookResult = ReturnType<typeof useAllStarshipsLazyQuery>;\nexport type AllStarshipsQueryResult = ApolloReactCommon.QueryResult<AllStarshipsQuery, AllStarshipsQueryVariables>;"]},"metadata":{},"sourceType":"module"}