{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/dev/swapiplayground/webapp/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/client\";\nimport { useAllFilmsQuery } from \"../generated/graphql\";\nconst TEST = gql`\n  query {\n    allFilms {\n      title\n      id\n    }\n  }\n`;\n\nconst Landing = props => {\n  // const [state, dispatch] = useTypeFilter();\n  const test = useQuery(TEST);\n  const {\n    loading,\n    error,\n    data\n  } = useAllFilmsQuery();\n  if (loading) return __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"...\");\n  if (error) return __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"err\");\n  console.log(data);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n};\n\nexport default Landing;","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/pages/index.tsx"],"names":["React","gql","useQuery","useAllFilmsQuery","TEST","Landing","props","test","loading","error","data","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAGA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,MAAMC,IAAI,GAAGH,GAAI;;;;;;;CAAjB;;AASA,MAAMI,OAAgB,GAAGC,KAAK,IAAI;AAChC;AACA,QAAMC,IAAI,GAAGL,QAAQ,CAACE,IAAD,CAArB;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,gBAAgB,EAAjD;AACA,MAAIK,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACXE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAhBD;;AAkBA,eAAeL,OAAf","sourcesContent":["import React, { FC } from \"react\";\nimport { withApollo } from \"../lib/apollo\";\n\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/client\";\nimport { useTypeFilter } from \"../hooks/useTypeFilter\";\nimport { useAllFilmsQuery } from \"../generated/graphql\";\n\nconst TEST = gql`\n  query {\n    allFilms {\n      title\n      id\n    }\n  }\n`;\n\nconst Landing: FC<any> = props => {\n  // const [state, dispatch] = useTypeFilter();\n  const test = useQuery(TEST);\n  const { loading, error, data } = useAllFilmsQuery();\n  if (loading) return <h2>...</h2>;\n  if (error) return <h2>err</h2>;\n  console.log(data);\n  return (\n    <div>\n      {/* {data.allFilms.map((poke: any) => (\n        <div key={poke.id}>\n          <h1>{poke.title}</h1>\n        </div>\n      ))} */}\n    </div>\n  );\n};\n\nexport default Landing;\n"]},"metadata":{},"sourceType":"module"}