{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useTypeFilter } from \"../hooks/useTypeFilter\";\n\nconst translateProps = props => {\n  // let _styles = {...commonStyles.default}\n  if (props.disable) {} // _styles = {..._styles, ...commonStyles.disable};\n  // const newProps = {...props,styles:_styles }\n\n\n  const newProps = _objectSpread({}, props, {\n    yes: \"\"\n  });\n\n  return newProps;\n};\n\nconst test = props => {\n  const [state, dispatch] = useTypeFilter();\n  return [state];\n};\n\nconst withData = WrappedComponent => {\n  return function wrappedRender(args) {\n    return WrappedComponent(test(args));\n  };\n};\n\nexport default withData;","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/HOC/withData.tsx"],"names":["useTypeFilter","translateProps","props","disable","newProps","yes","test","state","dispatch","withData","WrappedComponent","wrappedRender","args"],"mappings":";;;;;;AAEA,SAASA,aAAT,QAA8B,wBAA9B;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B;AACA,MAAIA,KAAK,CAACC,OAAV,EAAmB,CAElB,CAFD,CACE;AAEF;;;AACA,QAAMC,QAAQ,qBAAQF,KAAR;AAAeG,IAAAA,GAAG,EAAE;AAApB,IAAd;;AACA,SAAOD,QAAP;AACD,CARD;;AAUA,MAAME,IAAI,GAAGJ,KAAK,IAAI;AACpB,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,aAAa,EAAvC;AACA,SAAO,CAACO,KAAD,CAAP;AACD,CAHD;;AAKA,MAAME,QAAQ,GAAIC,gBAAD,IAA2B;AAC1C,SAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,WAAOF,gBAAgB,CAACJ,IAAI,CAACM,IAAD,CAAL,CAAvB;AACD,GAFD;AAGD,CAJD;;AAMA,eAAeH,QAAf","sourcesContent":["import { FC, useReducer, useEffect, useState } from \"react\";\nimport { useAllFilmsQuery } from \"../generated/graphql\";\nimport { useTypeFilter } from \"../hooks/useTypeFilter\";\n\nconst translateProps = props => {\n  // let _styles = {...commonStyles.default}\n  if (props.disable) {\n    // _styles = {..._styles, ...commonStyles.disable};\n  }\n  // const newProps = {...props,styles:_styles }\n  const newProps = { ...props, yes: \"\" };\n  return newProps;\n};\n\nconst test = props => {\n  const [state, dispatch] = useTypeFilter();\n  return [state];\n};\n\nconst withData = (WrappedComponent: any) => {\n  return function wrappedRender(args) {\n    return WrappedComponent(test(args));\n  };\n};\n\nexport default withData;\n"]},"metadata":{},"sourceType":"module"}