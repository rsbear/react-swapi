{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useReducer } from 'react';\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql';\nvar initState = {\n  mainType: []\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'setType':\n      return _objectSpread({}, state, {\n        mainType: action.payload\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  var _useReducer = useReducer(reducer, initState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var movies = useAllFilmsQuery();\n  var persons = useAllCharacterNamesQuery();\n  var starships = useAllStarshipsQuery();\n  useEffect(function () {\n    if (!movies.loading && !movies.error && movies.data) {\n      dispatch({\n        type: 'setType',\n        payload: movies.data.allFilms\n      });\n    }\n  }, [movies]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllFilmsQuery","useAllCharacterNamesQuery","useAllStarshipsQuery","initState","mainType","reducer","state","action","type","payload","useTypeFilter","dispatch","movies","persons","starships","loading","error","data","allFilms"],"mappings":";;;;;;;;;;;;AAAA,SAA0BA,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,EAAsDC,oBAAtD,QAAkF,sBAAlF;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE;AADM,CAAlB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,+BAAYF,KAAZ;AAAmBF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAApC;;AACF;AACE,aAAO,EAAP;AAJJ;AAMD,CAPD;;AASA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,oBACPX,UAAU,CAACM,OAAD,EAAUF,SAAV,CADH;AAAA,MAC1BG,KAD0B;AAAA,MACnBK,QADmB;;AAEjC,MAAMC,MAAM,GAAGZ,gBAAgB,EAA/B;AACA,MAAMa,OAAO,GAAGZ,yBAAyB,EAAzC;AACA,MAAMa,SAAS,GAAGZ,oBAAoB,EAAtC;AAGAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACc,MAAM,CAACG,OAAR,IAAmB,CAACH,MAAM,CAACI,KAA3B,IAAoCJ,MAAM,CAACK,IAA/C,EAAqD;AACnDN,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEG,MAAM,CAACK,IAAP,CAAYC;AAAxC,OAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACN,MAAD,CAJM,CAAT;AAMA,SAAO,CAACN,KAAD,EAAQK,QAAR,CAAP;AACD,CAdM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql'\n\nconst initState = {\n  mainType: []\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return { ...state, mainType: action.payload }\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const movies = useAllFilmsQuery()\n  const persons = useAllCharacterNamesQuery()\n  const starships = useAllStarshipsQuery()\n\n\n  useEffect(() => {\n    if (!movies.loading && !movies.error && movies.data) {\n      dispatch({ type: 'setType', payload: movies.data.allFilms })\n    }\n  }, [movies])\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}