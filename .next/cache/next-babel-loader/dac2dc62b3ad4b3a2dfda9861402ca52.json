{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useReducer } from 'react';\nimport { useAllStarshipsQuery, useAllCharacterNamesQuery, useAllFilmsQuery } from '../generated/graphql';\nvar initState = {\n  isLoading: true,\n  mainType: \"films\",\n  typeArr: []\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'setLoading':\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case 'setType':\n      return _objectSpread({}, state, {\n        mainType: action.payload\n      });\n\n    case 'setArr':\n      return _objectSpread({}, state, {\n        typeArr: action.payload,\n        isLoading: false\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  var _useReducer = useReducer(reducer, initState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var films = useAllFilmsQuery();\n  var persons = useAllCharacterNamesQuery();\n  var starships = useAllStarshipsQuery();\n  useEffect(function () {\n    if (state.mainType === \"films\") {\n      if (films.loading) {\n        dispatch({\n          type: 'setLoading'\n        });\n      } else if (!films.error && films.data) {\n        dispatch({\n          type: 'setArr',\n          payload: films.data.allFilms\n        });\n      }\n    }\n  }, [films]);\n  useEffect(function () {\n    if (state.mainType === \"persons\") {\n      if (persons.loading) {\n        dispatch({\n          type: 'setLoading'\n        });\n      } else if (!persons.error && persons.data) {\n        dispatch({\n          type: 'setArr',\n          payload: persons.data.allPersons\n        });\n      }\n    }\n  }, [persons]);\n  useEffect(function () {\n    if (state.mainType === \"starships\") {\n      if (starships.loading) {\n        dispatch({\n          type: 'setLoading'\n        });\n      } else if (!starships.error && starships.data) {\n        dispatch({\n          type: 'setArr',\n          payload: starships.data.allStarships\n        });\n      }\n    }\n  }, [starships]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllStarshipsQuery","useAllCharacterNamesQuery","useAllFilmsQuery","initState","isLoading","mainType","typeArr","reducer","state","action","type","payload","useTypeFilter","dispatch","films","persons","starships","loading","error","data","allFilms","allPersons","allStarships"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery, useAllStarshipsQuery, useAllCharacterNamesQuery, useAllFilmsQuery } from '../generated/graphql'\n\nconst initState = {\n  isLoading: true,\n  mainType: \"films\",\n  typeArr: []\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setLoading':\n      return { ...state, isLoading: true }\n    case 'setType':\n      return { ...state, mainType: action.payload }\n    case 'setArr':\n      return { ...state, typeArr: action.payload, isLoading: false }\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const films = useAllFilmsQuery()\n  const persons = useAllCharacterNamesQuery()\n  const starships = useAllStarshipsQuery()\n\n  useEffect(() => {\n    if (state.mainType === \"films\") {\n      if (films.loading) {\n        dispatch({ type: 'setLoading' })\n      } else if (!films.error && films.data) {\n        dispatch({ type: 'setArr', payload: films.data.allFilms })\n      }\n    }\n  }, [films])\n\n  useEffect(() => {\n    if (state.mainType === \"persons\") {\n      if (persons.loading) {\n        dispatch({ type: 'setLoading' })\n      } else if (!persons.error && persons.data) {\n        dispatch({ type: 'setArr', payload: persons.data.allPersons })\n      }\n    }\n  }, [persons])\n\n  useEffect(() => {\n    if (state.mainType === \"starships\") {\n      if (starships.loading) {\n        dispatch({ type: 'setLoading' })\n      } else if (!starships.error && starships.data) {\n        dispatch({ type: 'setArr', payload: starships.data.allStarships })\n      }\n    }\n  }, [starships])\n\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}