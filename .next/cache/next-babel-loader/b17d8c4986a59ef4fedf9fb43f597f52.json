{"ast":null,"code":"import { useEffect, useReducer } from 'react';\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql';\nconst initState = [];\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return [...state, action.payload];\n\n    default:\n      return [];\n  }\n};\n\nexport const useTypeFilter = () => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initState);\n  const movies = useAllFilmsQuery();\n  const persons = useAllCharacterNamesQuery();\n  const starships = useAllStarshipsQuery();\n  useEffect(() => {\n    if (!movies.loading && !movies.error) {\n      dispatch({\n        type: 'setType',\n        payload: movies.data.allFilms\n      });\n    }\n  }, [state]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllFilmsQuery","useAllCharacterNamesQuery","useAllStarshipsQuery","initState","reducer","state","action","type","payload","useTypeFilter","dispatch","movies","persons","starships","loading","error","data","allFilms"],"mappings":"AAAA,SAA0BA,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,EAAsDC,oBAAtD,QAAkF,sBAAlF;AAEA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACF;AACE,aAAO,EAAP;AAJJ;AAMD,CAPD;;AASA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM;AAAA,OAACJ,KAAD;AAAA,OAAQK;AAAR,MAAoBX,UAAU,CAACK,OAAD,EAAUD,SAAV,CAApC;AACA,QAAMQ,MAAM,GAAGX,gBAAgB,EAA/B;AACA,QAAMY,OAAO,GAAGX,yBAAyB,EAAzC;AACA,QAAMY,SAAS,GAAGX,oBAAoB,EAAtC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACa,MAAM,CAACG,OAAR,IAAmB,CAACH,MAAM,CAACI,KAA/B,EAAsC;AACpCL,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEG,MAAM,CAACK,IAAP,CAAYC;AAAxC,OAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACZ,KAAD,CAJM,CAAT;AAMA,SAAO,CAACA,KAAD,EAAQK,QAAR,CAAP;AACD,CAbM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql'\n\nconst initState = []\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return [...state, action.payload]\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const movies = useAllFilmsQuery()\n  const persons = useAllCharacterNamesQuery()\n  const starships = useAllStarshipsQuery()\n\n  useEffect(() => {\n    if (!movies.loading && !movies.error) {\n      dispatch({ type: 'setType', payload: movies.data.allFilms })\n    }\n  }, [state])\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}