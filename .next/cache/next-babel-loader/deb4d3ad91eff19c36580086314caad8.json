{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from \"apollo-link-context\";\nimport fetch from 'isomorphic-unfetch';\nexport default function createApolloClient(initialState, ctx) {\n  var fetchOptions = {};\n  var link = new HttpLink({\n    uri: 'https://graphql.org/swapi-graphql/',\n    // Server URL (must be absolute)\n    credentials: 'include',\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    fetch: fetch\n  });\n  var authLink = setContext(function (request, _ref) {\n    var headers = _ref.headers;\n    return {\n      uri: 'https://graphql.org/swapi-graphql/',\n      // Server URL (must be absolute)\n      headers: _objectSpread({}, headers, {\n        \"Access-Control-Allow-Origin\": \"*\"\n      })\n    };\n  });\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: authLink,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/lib/apolloClient.ts"],"names":["ApolloClient","InMemoryCache","HttpLink","setContext","fetch","createApolloClient","initialState","ctx","fetchOptions","link","uri","credentials","headers","authLink","request","ssrMode","Boolean","cache","restore"],"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAGA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,IAAI,GAAG,IAAIP,QAAJ,CAAa;AACxBQ,IAAAA,GAAG,EAAE,oCADmB;AACmB;AAC3CC,IAAAA,WAAW,EAAE,SAFW;AAGxBC,IAAAA,OAAO,EAAE;AACP,qCAA+B;AADxB,KAHe;AAMxBR,IAAAA,KAAK,EAALA;AANwB,GAAb,CAAb;AASA,MAAMS,QAAQ,GAAGV,UAAU,CAAC,UAACW,OAAD,QAA0B;AAAA,QAAdF,OAAc,QAAdA,OAAc;AACpD,WAAO;AACLF,MAAAA,GAAG,EAAE,oCADA;AACsC;AAC3CE,MAAAA,OAAO,oBACFA,OADE;AAEL,uCAA+B;AAF1B;AAFF,KAAP;AAOD,GAR0B,CAA3B;AASA,SAAO,IAAIZ,YAAJ,CAAiB;AACtBe,IAAAA,OAAO,EAAEC,OAAO,CAACT,GAAD,CADM;AAEtBE,IAAAA,IAAI,EAAEI,QAFgB;AAGtBI,IAAAA,KAAK,EAAE,IAAIhB,aAAJ,GAAoBiB,OAApB,CAA4BZ,YAA5B;AAHe,GAAjB,CAAP;AAKD","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from \"apollo-link-context\";\nimport fetch from 'isomorphic-unfetch'\nimport { ApolloLink } from \"apollo-link\";\n\nexport default function createApolloClient(initialState, ctx) {\n  const fetchOptions = {\n  };\n  const link = new HttpLink({\n    uri: 'https://graphql.org/swapi-graphql/', // Server URL (must be absolute)\n    credentials: 'include',\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    fetch\n  })\n\n  const authLink = setContext((request, { headers }) => {\n    return {\n      uri: 'https://graphql.org/swapi-graphql/', // Server URL (must be absolute)\n      headers: {\n        ...headers,\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    };\n  });\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: authLink,\n    cache: new InMemoryCache().restore(initialState),\n  })\n}"]},"metadata":{},"sourceType":"module"}