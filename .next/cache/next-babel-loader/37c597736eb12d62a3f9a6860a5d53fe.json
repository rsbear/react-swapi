{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useReducer } from 'react';\nimport { useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery } from '../generated/graphql';\nconst initState = {\n  mainType: \"movies\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return _objectSpread({}, state, {\n        mainType: action.payload\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport const useTypeFilter = () => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initState);\n  const movies = useAllFilmsLazyQuery();\n  const persons = useAllCharacterNamesLazyQuery();\n  const starships = useAllStarshipsLazyQuery();\n  useEffect(() => {});\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllFilmsLazyQuery","useAllCharacterNamesLazyQuery","useAllStarshipsLazyQuery","initState","mainType","reducer","state","action","type","payload","useTypeFilter","dispatch","movies","persons","starships"],"mappings":";;;;;;AAAA,SAA0BA,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAA4EC,oBAA5E,EAAkGC,6BAAlG,EAAiIC,wBAAjI,QAAiK,sBAAjK;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE;AADM,CAAlB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,+BAAYF,KAAZ;AAAmBF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAApC;;AACF;AACE,aAAO,EAAP;AAJJ;AAMD,CAPD;;AASA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM;AAAA,OAACJ,KAAD;AAAA,OAAQK;AAAR,MAAoBZ,UAAU,CAACM,OAAD,EAAUF,SAAV,CAApC;AACA,QAAMS,MAAM,GAAGZ,oBAAoB,EAAnC;AACA,QAAMa,OAAO,GAAGZ,6BAA6B,EAA7C;AACA,QAAMa,SAAS,GAAGZ,wBAAwB,EAA1C;AAEAJ,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,CAAT;AAKA,SAAO,CAACQ,KAAD,EAAQK,QAAR,CAAP;AACD,CAZM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery, useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery } from '../generated/graphql'\n\nconst initState = {\n  mainType: \"movies\"\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return { ...state, mainType: action.payload }\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const movies = useAllFilmsLazyQuery()\n  const persons = useAllCharacterNamesLazyQuery()\n  const starships = useAllStarshipsLazyQuery()\n\n  useEffect(() => {\n\n  })\n\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}