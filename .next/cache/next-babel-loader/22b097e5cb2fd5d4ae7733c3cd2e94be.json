{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { useEffect, useReducer } from 'react';\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql';\nvar initState = [];\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'setType':\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  var _useReducer = useReducer(reducer, initState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var movies = useAllFilmsQuery();\n  var persons = useAllCharacterNamesQuery();\n  var starships = useAllStarshipsQuery();\n  console.log(\"is this mounting?\");\n  useEffect(function () {\n    if (!movies.loading && !movies.error && movies.data) {\n      dispatch({\n        type: 'setType',\n        payload: movies.data.allFilms\n      });\n    }\n  }, [movies]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllFilmsQuery","useAllCharacterNamesQuery","useAllStarshipsQuery","initState","reducer","state","action","type","payload","useTypeFilter","dispatch","movies","persons","starships","console","log","loading","error","data","allFilms"],"mappings":";AAAA,SAA0BA,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,EAAsDC,oBAAtD,QAAkF,sBAAlF;AAEA,IAAMC,SAAS,GAAG,EAAlB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,0CAAWF,KAAX,IAAkBC,MAAM,CAACE,OAAzB;;AACF;AACE,aAAO,EAAP;AAJJ;AAMD,CAPD;;AASA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,oBACPV,UAAU,CAACK,OAAD,EAAUD,SAAV,CADH;AAAA,MAC1BE,KAD0B;AAAA,MACnBK,QADmB;;AAEjC,MAAMC,MAAM,GAAGX,gBAAgB,EAA/B;AACA,MAAMY,OAAO,GAAGX,yBAAyB,EAAzC;AACA,MAAMY,SAAS,GAAGX,oBAAoB,EAAtC;AAEAY,EAAAA,OAAO,CAACC,GAAR;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACa,MAAM,CAACK,OAAR,IAAmB,CAACL,MAAM,CAACM,KAA3B,IAAoCN,MAAM,CAACO,IAA/C,EAAqD;AACnDR,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEG,MAAM,CAACO,IAAP,CAAYC;AAAxC,OAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACR,MAAD,CAJM,CAAT;AAMA,SAAO,CAACN,KAAD,EAAQK,QAAR,CAAP;AACD,CAfM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql'\n\nconst initState = []\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return [...state, action.payload]\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const movies = useAllFilmsQuery()\n  const persons = useAllCharacterNamesQuery()\n  const starships = useAllStarshipsQuery()\n\n  console.log(`is this mounting?`)\n\n  useEffect(() => {\n    if (!movies.loading && !movies.error && movies.data) {\n      dispatch({ type: 'setType', payload: movies.data.allFilms })\n    }\n  }, [movies])\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}