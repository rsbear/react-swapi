{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport createApolloClient from \"./apolloClient\";\nlet globalApolloClient = null;\n/**\n * @param {NextPageContext | NextAppContext} ctx\n */\n\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn(\"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" + \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\");\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = () => null;\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nconst initApolloClient = (initialState, ctx) => {\n  if (true) {\n    return createApolloClient(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Creates a withApollo HOC\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\n\nexport const withApollo = ({\n  ssr = false\n} = {}) => Application => {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (// <ApolloProvider client={client}>\n      //   <PageComponent {...pageProps} />\n      // </ApolloProvider>\n      __jsx(Application, _extends({\n        client: client\n      }, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }))\n    );\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = Application.PageComponent.displayName || Application.PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (Application.PageComponent.getInitialProps) {\n        pageProps = await Application.PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        const {\n          AppTree\n        } = ctx;\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        if (ssr && AppTree) {\n          try {\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\"); // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread({}, pageProps, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient\n                })\n              };\n            }\n\n            await getDataFromTree(__jsx(AppTree, _extends({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 123\n              },\n              __self: this\n            })));\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n      }\n\n      return _objectSpread({}, pageProps, {\n        apolloState: apolloClient.cache.extract(),\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx"],"names":["React","App","createApolloClient","globalApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","Application","WithApollo","pageProps","client","undefined","displayName","PageComponent","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","cache","extract"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"./apolloClient\";\n\nlet globalApolloClient = null;\n\n/**\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === \"development\") {\n    if (inAppContext) {\n      console.warn(\n        \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n          \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient ||\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = () => null;\n\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\n/**\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState, ctx) => {\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\n/**\n * Creates a withApollo HOC\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => Application => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      // <ApolloProvider client={client}>\n      //   <PageComponent {...pageProps} />\n      // </ApolloProvider>\n      <Application client={client} {...pageProps} />\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      Application.PageComponent.displayName ||\n      Application.PageComponent.name ||\n      \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (Application.PageComponent.getInitialProps) {\n        pageProps = await Application.PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === \"undefined\") {\n        const { AppTree } = ctx;\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        if (ssr && AppTree) {\n          try {\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n      }\n\n      return {\n        ...pageProps,\n        apolloState: apolloClient.cache.extract(),\n        apolloClient: ctx.apolloClient\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}