{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { useState, useEffect } from 'react';\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql';\nvar initState = [];\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'setType':\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  // const [state, dispatch] = useReducer(reducer, initState)\n  var _useState = useState([]),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var movies = useAllFilmsQuery();\n  var persons = useAllCharacterNamesQuery();\n  var starships = useAllStarshipsQuery();\n  console.log(\"is this mounting?\");\n  useEffect(function () {\n    if (!movies.loading && !movies.error && movies.data) {\n      console.log(\"state \".concat(state));\n      console.log(\"movies \".concat(movies.data.allFilms));\n      setState(function (prevState) {\n        return [].concat(_toConsumableArray(prevState), [movies.data.allFilms]);\n      });\n    }\n  }, [movies]);\n  return [state, setState];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useState","useEffect","useAllFilmsQuery","useAllCharacterNamesQuery","useAllStarshipsQuery","initState","reducer","state","action","type","payload","useTypeFilter","setState","movies","persons","starships","console","log","loading","error","data","allFilms","prevState"],"mappings":";AAAA,SAAgBA,QAAhB,EAA0BC,SAA1B,QAAuD,OAAvD;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,EAAsDC,oBAAtD,QAAkF,sBAAlF;AAEA,IAAMC,SAAS,GAAG,EAAlB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,0CAAWF,KAAX,IAAkBC,MAAM,CAACE,OAAzB;;AACF;AACE,aAAO,EAAP;AAJJ;AAMD,CAPD;;AASA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC;AADiC,kBAEPX,QAAQ,CAAC,EAAD,CAFD;AAAA,MAE1BO,KAF0B;AAAA,MAEnBK,QAFmB;;AAGjC,MAAMC,MAAM,GAAGX,gBAAgB,EAA/B;AACA,MAAMY,OAAO,GAAGX,yBAAyB,EAAzC;AACA,MAAMY,SAAS,GAAGX,oBAAoB,EAAtC;AAEAY,EAAAA,OAAO,CAACC,GAAR;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACY,MAAM,CAACK,OAAR,IAAmB,CAACL,MAAM,CAACM,KAA3B,IAAoCN,MAAM,CAACO,IAA/C,EAAqD;AACnDJ,MAAAA,OAAO,CAACC,GAAR,iBAAqBV,KAArB;AACAS,MAAAA,OAAO,CAACC,GAAR,kBAAsBJ,MAAM,CAACO,IAAP,CAAYC,QAAlC;AACAT,MAAAA,QAAQ,CAAC,UAAAU,SAAS,EAAI;AACpB,4CAAWA,SAAX,IAAsBT,MAAM,CAACO,IAAP,CAAYC,QAAlC;AACD,OAFO,CAAR;AAGD;AACF,GARQ,EAQN,CAACR,MAAD,CARM,CAAT;AAUA,SAAO,CAACN,KAAD,EAAQK,QAAR,CAAP;AACD,CApBM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsQuery, useAllCharacterNamesQuery, useAllStarshipsQuery } from '../generated/graphql'\n\nconst initState = []\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return [...state, action.payload]\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  // const [state, dispatch] = useReducer(reducer, initState)\n  const [state, setState] = useState([])\n  const movies = useAllFilmsQuery()\n  const persons = useAllCharacterNamesQuery()\n  const starships = useAllStarshipsQuery()\n\n  console.log(`is this mounting?`)\n\n  useEffect(() => {\n    if (!movies.loading && !movies.error && movies.data) {\n      console.log(`state ${state}`)\n      console.log(`movies ${movies.data.allFilms}`)\n      setState(prevState => {\n        return [...prevState, movies.data.allFilms]\n      })\n    }\n  }, [movies])\n\n  return [state, setState]\n}"]},"metadata":{},"sourceType":"module"}