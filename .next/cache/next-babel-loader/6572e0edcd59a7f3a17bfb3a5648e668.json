{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { HttpLink, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst isServer = () => true;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(Application, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      serverAccessToken,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(Application, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    const displayName = Application.displayName || Application.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx; // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      const apolloClient = ctx.ctx.apolloClient = initApolloClient({});\n      const pageProps = Application.getInitialProps ? await Application.getInitialProps(ctx) : {}; // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              apolloClient: apolloClient,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  const link = new HttpLink({\n    uri: \"https://swapi.graph.cool/\",\n    // Server URL (must be absolute)\n    fetch\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n} // import React from \"react\";\n// import App from \"next/app\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import createApolloClient from \"./apolloClient\";\n// let globalApolloClient = null;\n// /**\n//  * @param {NextPageContext | NextAppContext} ctx\n//  */\n// export const initOnContext = ctx => {\n//   const inAppContext = Boolean(ctx.ctx);\n//   // We consider installing `withApollo({ ssr: true })` on global App level\n//   // as antipattern since it disables project wide Automatic Static Optimization.\n//   if (process.env.NODE_ENV === \"development\") {\n//     if (inAppContext) {\n//       console.warn(\n//         \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n//           \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n//       );\n//     }\n//   }\n//   // Initialize ApolloClient if not already done\n//   const apolloClient =\n//     ctx.apolloClient ||\n//     initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n//   apolloClient.toJSON = () => null;\n//   ctx.apolloClient = apolloClient;\n//   if (inAppContext) {\n//     ctx.ctx.apolloClient = apolloClient;\n//   }\n//   return ctx;\n// };\n// /**\n//  * @param  {NormalizedCacheObject} initialState\n//  * @param  {NextPageContext} ctx\n//  */\n// const initApolloClient = (initialState, ctx) => {\n//   if (typeof window === \"undefined\") {\n//     return createApolloClient(initialState, ctx);\n//   }\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState, ctx);\n//   }\n//   return globalApolloClient;\n// };\n// /**\n//  * Creates a withApollo HOC\n//  * @param  {Object} withApolloOptions\n//  * @param  {Boolean} [withApolloOptions.ssr=false]\n//  * @returns {(PageComponent: ReactNode) => ReactNode}\n//  */\n// export const withApollo = ({ ssr = false } = {}) => PageComponent => {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     let client;\n//     if (apolloClient) {\n//       // Happens on: getDataFromTree & next.js ssr\n//       client = apolloClient;\n//     } else {\n//       // Happens on: next.js csr\n//       client = initApolloClient(apolloState, undefined);\n//     }\n//     return <PageComponent {...pageProps} client={client} />;\n//   };\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== \"production\") {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || \"Component\";\n//     WithApollo.displayName = `withApollo(${displayName})`;\n//   }\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const inAppContext = Boolean(ctx.ctx);\n//       const { apolloClient } = initOnContext(ctx);\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {};\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx);\n//       } else if (inAppContext) {\n//         pageProps = await App.getInitialProps(ctx);\n//       }\n//       // Only on the server:\n//       if (typeof window === \"undefined\") {\n//         const { AppTree } = ctx;\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps;\n//         }\n//         if (ssr && AppTree) {\n//           try {\n//             const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n//             // Since AppComponents and PageComponents have different context types\n//             // we need to modify their props a little.\n//             let props;\n//             if (inAppContext) {\n//               props = { ...pageProps, apolloClient };\n//             } else {\n//               props = { pageProps: { ...pageProps, apolloClient } };\n//             }\n//             await getDataFromTree(<AppTree {...props} />);\n//           } catch (error) {\n//             console.error(\"Error while running `getDataFromTree`\", error);\n//           }\n//         }\n//       }\n//       return {\n//         ...pageProps,\n//         apolloState: apolloClient.cache.extract(),\n//         apolloClient: ctx.apolloClient\n//       };\n//     };\n//   }\n//   return WithApollo;\n// };","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/lib/apollo.tsx"],"names":["React","Head","HttpLink","InMemoryCache","ApolloClient","fetch","isServer","withApollo","Application","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","link","uri","ssrMode","restore"],"mappings":"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AA,KAAK,EAAE,IAAI3B,aAAJ,GAAoBmC,OAApB,CAA4BJ,YAA5B;AAHe,GAAjB,CAAP;AAKD,C,CACD;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { HttpLink, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(Application: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return <Application {...pageProps} apolloClient={client} />;\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      Application.displayName || Application.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}));\n\n      const pageProps = Application.getInitialProps\n        ? await Application.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<any> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}) {\n  const link = new HttpLink({\n    uri: \"https://swapi.graph.cool/\", // Server URL (must be absolute)\n    fetch\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n// import React from \"react\";\n// import App from \"next/app\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import createApolloClient from \"./apolloClient\";\n\n// let globalApolloClient = null;\n\n// /**\n//  * @param {NextPageContext | NextAppContext} ctx\n//  */\n// export const initOnContext = ctx => {\n//   const inAppContext = Boolean(ctx.ctx);\n\n//   // We consider installing `withApollo({ ssr: true })` on global App level\n//   // as antipattern since it disables project wide Automatic Static Optimization.\n//   if (process.env.NODE_ENV === \"development\") {\n//     if (inAppContext) {\n//       console.warn(\n//         \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n//           \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n//       );\n//     }\n//   }\n\n//   // Initialize ApolloClient if not already done\n//   const apolloClient =\n//     ctx.apolloClient ||\n//     initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n//   apolloClient.toJSON = () => null;\n\n//   ctx.apolloClient = apolloClient;\n//   if (inAppContext) {\n//     ctx.ctx.apolloClient = apolloClient;\n//   }\n\n//   return ctx;\n// };\n\n// /**\n//  * @param  {NormalizedCacheObject} initialState\n//  * @param  {NextPageContext} ctx\n//  */\n// const initApolloClient = (initialState, ctx) => {\n//   if (typeof window === \"undefined\") {\n//     return createApolloClient(initialState, ctx);\n//   }\n\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState, ctx);\n//   }\n\n//   return globalApolloClient;\n// };\n\n// /**\n//  * Creates a withApollo HOC\n//  * @param  {Object} withApolloOptions\n//  * @param  {Boolean} [withApolloOptions.ssr=false]\n//  * @returns {(PageComponent: ReactNode) => ReactNode}\n//  */\n// export const withApollo = ({ ssr = false } = {}) => PageComponent => {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     let client;\n//     if (apolloClient) {\n//       // Happens on: getDataFromTree & next.js ssr\n//       client = apolloClient;\n//     } else {\n//       // Happens on: next.js csr\n//       client = initApolloClient(apolloState, undefined);\n//     }\n\n//     return <PageComponent {...pageProps} client={client} />;\n//   };\n\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== \"production\") {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || \"Component\";\n//     WithApollo.displayName = `withApollo(${displayName})`;\n//   }\n\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const inAppContext = Boolean(ctx.ctx);\n//       const { apolloClient } = initOnContext(ctx);\n\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {};\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx);\n//       } else if (inAppContext) {\n//         pageProps = await App.getInitialProps(ctx);\n//       }\n\n//       // Only on the server:\n//       if (typeof window === \"undefined\") {\n//         const { AppTree } = ctx;\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps;\n//         }\n\n//         if (ssr && AppTree) {\n//           try {\n//             const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n//             // Since AppComponents and PageComponents have different context types\n//             // we need to modify their props a little.\n//             let props;\n//             if (inAppContext) {\n//               props = { ...pageProps, apolloClient };\n//             } else {\n//               props = { pageProps: { ...pageProps, apolloClient } };\n//             }\n\n//             await getDataFromTree(<AppTree {...props} />);\n//           } catch (error) {\n//             console.error(\"Error while running `getDataFromTree`\", error);\n//           }\n//         }\n//       }\n\n//       return {\n//         ...pageProps,\n//         apolloState: apolloClient.cache.extract(),\n//         apolloClient: ctx.apolloClient\n//       };\n//     };\n//   }\n\n//   return WithApollo;\n// };\n"]},"metadata":{},"sourceType":"module"}