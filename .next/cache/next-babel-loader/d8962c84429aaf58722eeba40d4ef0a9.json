{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useReducer } from 'react';\nimport { useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery } from '../generated/graphql';\nvar initState = {\n  mainType: \"films\",\n  typeArr: []\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'setType':\n      return _objectSpread({}, state, {\n        mainType: action.payload\n      });\n\n    case 'typeArr':\n      return _objectSpread({}, state, {\n        typeArr: action.payload\n      });\n\n    default:\n      return [];\n  }\n};\n\nexport var useTypeFilter = function useTypeFilter() {\n  var _useReducer = useReducer(reducer, initState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var _useAllFilmsLazyQuery = useAllFilmsLazyQuery(),\n      _useAllFilmsLazyQuery2 = _slicedToArray(_useAllFilmsLazyQuery, 2),\n      fetchFilms = _useAllFilmsLazyQuery2[0],\n      films = _useAllFilmsLazyQuery2[1];\n\n  var _useAllCharacterNames = useAllCharacterNamesLazyQuery(),\n      _useAllCharacterNames2 = _slicedToArray(_useAllCharacterNames, 2),\n      fetchPersons = _useAllCharacterNames2[0],\n      persons = _useAllCharacterNames2[1];\n\n  var _useAllStarshipsLazyQ = useAllStarshipsLazyQuery(),\n      _useAllStarshipsLazyQ2 = _slicedToArray(_useAllStarshipsLazyQ, 2),\n      fetchStarships = _useAllStarshipsLazyQ2[0],\n      starships = _useAllStarshipsLazyQ2[1];\n\n  useEffect(function () {\n    if (state.mainType === \"films\") {\n      fetchFilms();\n\n      if (!films.loading && !films.error) {\n        dispatch({\n          type: 'typeArr',\n          payload: films.data.allFilms\n        });\n      }\n    }\n  }, [films]);\n  return [state, dispatch];\n};","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/hooks/useTypeFilter.ts"],"names":["useEffect","useReducer","useAllFilmsLazyQuery","useAllCharacterNamesLazyQuery","useAllStarshipsLazyQuery","initState","mainType","typeArr","reducer","state","action","type","payload","useTypeFilter","dispatch","fetchFilms","films","fetchPersons","persons","fetchStarships","starships","loading","error","data","allFilms"],"mappings":";;;;;;;;;;;;;AAAA,SAA0BA,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,oBAAT,EAA+BC,6BAA/B,EAA8DC,wBAA9D,QAA8F,sBAA9F;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,OADM;AAEhBC,EAAAA,OAAO,EAAE;AAFO,CAAlB;;AAKA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,QAAQ,EAAEI,MAAM,CAACE;AAApC;;AACF,SAAK,SAAL;AACE,+BAAYH,KAAZ;AAAmBF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAAnC;;AACF;AACE,aAAO,EAAP;AANJ;AAQD,CATD;;AAWA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,oBACPZ,UAAU,CAACO,OAAD,EAAUH,SAAV,CADH;AAAA,MAC1BI,KAD0B;AAAA,MACnBK,QADmB;;AAAA,8BAELZ,oBAAoB,EAFf;AAAA;AAAA,MAE1Ba,UAF0B;AAAA,MAEdC,KAFc;;AAAA,8BAGDb,6BAA6B,EAH5B;AAAA;AAAA,MAG1Bc,YAH0B;AAAA,MAGZC,OAHY;;AAAA,8BAIGd,wBAAwB,EAJ3B;AAAA;AAAA,MAI1Be,cAJ0B;AAAA,MAIVC,SAJU;;AAMjCpB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,KAAK,CAACH,QAAN,KAAmB,OAAvB,EAAgC;AAC9BS,MAAAA,UAAU;;AACV,UAAI,CAACC,KAAK,CAACK,OAAP,IAAkB,CAACL,KAAK,CAACM,KAA7B,EAAoC;AAClCR,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,OAAO,EAAEI,KAAK,CAACO,IAAN,CAAWC;AAAvC,SAAD,CAAR;AACD;AACF;AACF,GAPQ,EAON,CAACR,KAAD,CAPM,CAAT;AAUA,SAAO,CAACP,KAAD,EAAQK,QAAR,CAAP;AACD,CAjBM","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { useAllFilmsLazyQuery, useAllCharacterNamesLazyQuery, useAllStarshipsLazyQuery } from '../generated/graphql'\n\nconst initState = {\n  mainType: \"films\",\n  typeArr: []\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setType':\n      return { ...state, mainType: action.payload }\n    case 'typeArr':\n      return { ...state, typeArr: action.payload }\n    default:\n      return []\n  }\n}\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n  const [fetchFilms, films] = useAllFilmsLazyQuery()\n  const [fetchPersons, persons] = useAllCharacterNamesLazyQuery()\n  const [fetchStarships, starships] = useAllStarshipsLazyQuery()\n\n  useEffect(() => {\n    if (state.mainType === \"films\") {\n      fetchFilms()\n      if (!films.loading && !films.error) {\n        dispatch({ type: 'typeArr', payload: films.data.allFilms })\n      }\n    }\n  }, [films])\n\n\n  return [state, dispatch]\n}"]},"metadata":{},"sourceType":"module"}