{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/dev/swapiplayground/webapp/HOC/withData.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useReducer, useEffect, useState } from \"react\";\nimport { useAllFilmsQuery } from \"../generated/graphql\";\nconst initState = {\n  filterByCharacter: \"\",\n  filterByDroid: \"\",\n  allFilms: [],\n  filtered: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"all\":\n      return _objectSpread({}, state, {\n        allFilms: [...state.allFilms, action.payload]\n      });\n  }\n};\n\nexport const withData = Page => props => {\n  console.log(props);\n\n  const WithData = () => {\n    const {\n      0: filtered,\n      1: setFiltered\n    } = useState([]);\n    const {\n      0: state,\n      1: dispatch\n    } = useReducer(reducer, initState);\n    const movies = useAllFilmsQuery();\n    useEffect(() => {\n      if (!movies.loading && !movies.error && movies.data) {\n        dispatch({\n          type: \"all\",\n          payload: movies.data.allFilms\n        });\n      }\n    }, [movies.loading]);\n    return __jsx(Page, _extends({}, state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  };\n\n  return WithData;\n}; // const translateProps = (props) => {\n//   let _styles = {...commonStyles.default}\n//   if(props.disable){\n//       _styles = {..._styles, ...commonStyles.disable};\n//   }\n//   const newProps = {...props,styles:_styles }\n//   return newProps;\n// }\n// const withData: FC<any> = (WrappedComponent: any) => {\n//   return function wrappedRender(args) {\n//       return WrappedComponent(translateProps(args));\n//   }\n// }\n// export const withData","map":{"version":3,"sources":["/Users/rsbear/dev/swapiplayground/webapp/HOC/withData.tsx"],"names":["useReducer","useEffect","useState","useAllFilmsQuery","initState","filterByCharacter","filterByDroid","allFilms","filtered","reducer","state","action","type","payload","withData","Page","props","console","log","WithData","setFiltered","dispatch","movies","loading","error","data"],"mappings":";;;;;;;;;;;;AAAA,SAAaA,UAAb,EAAyBC,SAAzB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,iBAAiB,EAAE,EADH;AAEhBC,EAAAA,aAAa,EAAE,EAFC;AAGhBC,EAAAA,QAAQ,EAAE,EAHM;AAIhBC,EAAAA,QAAQ,EAAE;AAJM,CAAlB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;AAA7B;AAFJ;AAID,CALD;;AAOA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAeC,KAAK,IAAI;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,QAAMG,QAAQ,GAAG,MAAM;AACrB,UAAM;AAAA,SAACX,QAAD;AAAA,SAAWY;AAAX,QAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,UAAM;AAAA,SAACQ,KAAD;AAAA,SAAQW;AAAR,QAAoBrB,UAAU,CAACS,OAAD,EAAUL,SAAV,CAApC;AACA,UAAMkB,MAAM,GAAGnB,gBAAgB,EAA/B;AAEAF,IAAAA,SAAS,CAAC,MAAM;AACd,UAAI,CAACqB,MAAM,CAACC,OAAR,IAAmB,CAACD,MAAM,CAACE,KAA3B,IAAoCF,MAAM,CAACG,IAA/C,EAAqD;AACnDJ,QAAAA,QAAQ,CAAC;AAAET,UAAAA,IAAI,EAAE,KAAR;AAAeC,UAAAA,OAAO,EAAES,MAAM,CAACG,IAAP,CAAYlB;AAApC,SAAD,CAAR;AACD;AACF,KAJQ,EAIN,CAACe,MAAM,CAACC,OAAR,CAJM,CAAT;AAMA,WAAO,MAAC,IAAD,eAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAZD;;AAcA,SAAOS,QAAP;AACD,CAjBM,C,CAmBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { FC, useReducer, useEffect, useState } from \"react\";\nimport { useAllFilmsQuery } from \"../generated/graphql\";\n\nconst initState = {\n  filterByCharacter: \"\",\n  filterByDroid: \"\",\n  allFilms: [],\n  filtered: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"all\":\n      return { ...state, allFilms: [...state.allFilms, action.payload] };\n  }\n};\n\nexport const withData = (Page: any) => props => {\n  console.log(props);\n  const WithData = () => {\n    const [filtered, setFiltered] = useState([]);\n    const [state, dispatch] = useReducer(reducer, initState);\n    const movies = useAllFilmsQuery();\n\n    useEffect(() => {\n      if (!movies.loading && !movies.error && movies.data) {\n        dispatch({ type: \"all\", payload: movies.data.allFilms });\n      }\n    }, [movies.loading]);\n\n    return <Page {...state} />;\n  };\n\n  return WithData;\n};\n\n// const translateProps = (props) => {\n//   let _styles = {...commonStyles.default}\n//   if(props.disable){\n//       _styles = {..._styles, ...commonStyles.disable};\n//   }\n//   const newProps = {...props,styles:_styles }\n//   return newProps;\n// }\n\n// const withData: FC<any> = (WrappedComponent: any) => {\n//   return function wrappedRender(args) {\n//       return WrappedComponent(translateProps(args));\n//   }\n// }\n\n// export const withData\n"]},"metadata":{},"sourceType":"module"}