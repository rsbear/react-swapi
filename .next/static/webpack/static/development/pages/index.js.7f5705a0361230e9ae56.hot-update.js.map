{"version":3,"file":"static/webpack/static/development/pages/index.js.7f5705a0361230e9ae56.hot-update.js","sources":["webpack:///./hooks/useTypeFilter.ts"],"sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport {\n  useAllFilmsLazyQuery,\n  useAllCharacterNamesLazyQuery,\n  useAllStarshipsLazyQuery,\n  useAllStarshipsQuery,\n  useAllCharacterNamesQuery,\n  useAllFilmsQuery\n} from \"../generated/graphql\";\n\nconst initState = {\n  isLoading: true,\n  browseType: \"films\",\n  list: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"setLoading\":\n      return { ...state, isLoading: true };\n    case \"setBrowse\":\n      return { ...state, browseType: action.payload };\n    case \"setList\":\n      return { ...state, list: action.payload, isLoading: false };\n    default:\n      return [];\n  }\n};\n\nexport const useTypeFilter = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n  const films = useAllFilmsQuery();\n  const persons = useAllCharacterNamesQuery();\n  const starships = useAllStarshipsQuery();\n\n  useEffect(() => { }, [state.browseType]);\n\n  useEffect(() => {\n    if (state.browseType === \"films\") {\n      if (films.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!films.error && films.data) {\n        dispatch({ type: \"setList\", payload: films.data.allFilms });\n      }\n    }\n  }, [films]);\n\n  useEffect(() => {\n    if (state.browseType === \"persons\") {\n      if (persons.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!persons.error && persons.data) {\n        dispatch({ type: \"setList\", payload: persons.data.allPersons });\n      }\n    }\n  }, [persons]);\n\n  useEffect(() => {\n    if (state.browseType === \"starships\") {\n      if (starships.loading) {\n        dispatch({ type: \"setLoading\" });\n      } else if (!starships.error && starships.data) {\n        dispatch({ type: \"setList\", payload: starships.data.allStarships });\n      }\n    }\n  }, [starships]);\n\n  return [state, dispatch];\n};\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}