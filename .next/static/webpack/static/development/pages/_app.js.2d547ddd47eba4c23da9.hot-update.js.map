{"version":3,"file":"static/webpack/static/development/pages/_app.js.2d547ddd47eba4c23da9.hot-update.js","sources":["webpack:///./lib/apollo.tsx"],"sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { HttpLink, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(Application: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return <Application {...pageProps} apolloClient={client} />;\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      Application.displayName || Application.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || Application.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}));\n\n      const pageProps = Application.getInitialProps\n        ? await Application.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<any> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}) {\n  const link = new HttpLink({\n    uri: \"https://graphql.org/swapi-graphql/\", // Server URL (must be absolute)\n    fetch\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n// import React from \"react\";\n// import App from \"next/app\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import createApolloClient from \"./apolloClient\";\n\n// let globalApolloClient = null;\n\n// /**\n//  * @param {NextPageContext | NextAppContext} ctx\n//  */\n// export const initOnContext = ctx => {\n//   const inAppContext = Boolean(ctx.ctx);\n\n//   // We consider installing `withApollo({ ssr: true })` on global App level\n//   // as antipattern since it disables project wide Automatic Static Optimization.\n//   if (process.env.NODE_ENV === \"development\") {\n//     if (inAppContext) {\n//       console.warn(\n//         \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n//           \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n//       );\n//     }\n//   }\n\n//   // Initialize ApolloClient if not already done\n//   const apolloClient =\n//     ctx.apolloClient ||\n//     initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n//   apolloClient.toJSON = () => null;\n\n//   ctx.apolloClient = apolloClient;\n//   if (inAppContext) {\n//     ctx.ctx.apolloClient = apolloClient;\n//   }\n\n//   return ctx;\n// };\n\n// /**\n//  * @param  {NormalizedCacheObject} initialState\n//  * @param  {NextPageContext} ctx\n//  */\n// const initApolloClient = (initialState, ctx) => {\n//   if (typeof window === \"undefined\") {\n//     return createApolloClient(initialState, ctx);\n//   }\n\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState, ctx);\n//   }\n\n//   return globalApolloClient;\n// };\n\n// /**\n//  * Creates a withApollo HOC\n//  * @param  {Object} withApolloOptions\n//  * @param  {Boolean} [withApolloOptions.ssr=false]\n//  * @returns {(PageComponent: ReactNode) => ReactNode}\n//  */\n// export const withApollo = ({ ssr = false } = {}) => PageComponent => {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     let client;\n//     if (apolloClient) {\n//       // Happens on: getDataFromTree & next.js ssr\n//       client = apolloClient;\n//     } else {\n//       // Happens on: next.js csr\n//       client = initApolloClient(apolloState, undefined);\n//     }\n\n//     return <PageComponent {...pageProps} client={client} />;\n//   };\n\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== \"production\") {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || \"Component\";\n//     WithApollo.displayName = `withApollo(${displayName})`;\n//   }\n\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const inAppContext = Boolean(ctx.ctx);\n//       const { apolloClient } = initOnContext(ctx);\n\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {};\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx);\n//       } else if (inAppContext) {\n//         pageProps = await App.getInitialProps(ctx);\n//       }\n\n//       // Only on the server:\n//       if (typeof window === \"undefined\") {\n//         const { AppTree } = ctx;\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps;\n//         }\n\n//         if (ssr && AppTree) {\n//           try {\n//             const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n//             // Since AppComponents and PageComponents have different context types\n//             // we need to modify their props a little.\n//             let props;\n//             if (inAppContext) {\n//               props = { ...pageProps, apolloClient };\n//             } else {\n//               props = { pageProps: { ...pageProps, apolloClient } };\n//             }\n\n//             await getDataFromTree(<AppTree {...props} />);\n//           } catch (error) {\n//             console.error(\"Error while running `getDataFromTree`\", error);\n//           }\n//         }\n//       }\n\n//       return {\n//         ...pageProps,\n//         apolloState: apolloClient.cache.extract(),\n//         apolloClient: ctx.apolloClient\n//       };\n//     };\n//   }\n\n//   return WithApollo;\n// };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAUA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAyBA;AAzBA;AAAA;AA4BA;AAEA;AAFA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAoCA;AACA;AACA;AACA;AACA;AAxCA;AA2CA;AACA;AACA;AACA;AA9CA;AAgDA;AACA;AAjDA;AAqDA;AArDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwDA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AACA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}